{"dependencies":[],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.checkValidArgs = checkValidArgs;\n  exports.checkValidInput = checkValidInput;\n  exports.convertError = convertError;\n  exports.convertErrors = convertErrors;\n  function checkValidArgs(keyValuePairs, callback) {\n    if (!Array.isArray(keyValuePairs) || keyValuePairs.length === 0 || !Array.isArray(keyValuePairs[0])) {\n      throw new Error('[AsyncStorage] Expected array of key-value pairs as first argument to multiSet');\n    }\n    if (callback && typeof callback !== 'function') {\n      if (Array.isArray(callback)) {\n        throw new Error('[AsyncStorage] Expected function as second argument to multiSet. Did you forget to wrap key-value pairs in an array for the first argument?');\n      }\n      throw new Error('[AsyncStorage] Expected function as second argument to multiSet');\n    }\n  }\n  function checkValidInput() {\n    for (var _len = arguments.length, input = new Array(_len), _key = 0; _key < _len; _key++) {\n      input[_key] = arguments[_key];\n    }\n    var key = input[0],\n      value = input[1];\n    if (typeof key !== 'string') {\n      console.warn(`[AsyncStorage] Using ${typeof key} type for key is not supported. This can lead to unexpected behavior/errors. Use string instead.\\nKey passed: ${key}\\n`);\n    }\n    if (input.length > 1 && typeof value !== 'string') {\n      if (value == null) {\n        throw new Error(`[AsyncStorage] Passing null/undefined as value is not supported. If you want to remove value, Use .removeItem method instead.\\nPassed value: ${value}\\nPassed key: ${key}\\n`);\n      } else {\n        console.warn(`[AsyncStorage] The value for key \"${key}\" is not a string. This can lead to unexpected behavior/errors. Consider stringifying it.\\nPassed value: ${value}\\nPassed key: ${key}\\n`);\n      }\n    }\n  }\n  function convertError(error) {\n    if (!error) {\n      return null;\n    }\n    var out = new Error(error.message);\n    out.key = error.key;\n    return out;\n  }\n  function convertErrors(errs) {\n    var errors = ensureArray(errs);\n    return errors ? errors.map(function (e) {\n      return convertError(e);\n    }) : null;\n  }\n  function ensureArray(e) {\n    if (Array.isArray(e)) {\n      return e.length === 0 ? null : e;\n    } else if (e) {\n      return [e];\n    } else {\n      return null;\n    }\n  }\n});","lineCount":60,"map":[[9,2,3,7],[9,11,3,16,"checkValidArgs"],[9,25,3,30],[9,26,3,31,"keyValuePairs"],[9,39,3,55],[9,41,3,57,"callback"],[9,49,3,74],[9,51,3,76],[10,4,4,2],[10,8,5,4],[10,9,5,5,"Array"],[10,14,5,10],[10,15,5,11,"isArray"],[10,22,5,18],[10,23,5,19,"keyValuePairs"],[10,36,5,32],[10,37,5,33],[10,41,6,4,"keyValuePairs"],[10,54,6,17],[10,55,6,18,"length"],[10,61,6,24],[10,66,6,29],[10,67,6,30],[10,71,7,4],[10,72,7,5,"Array"],[10,77,7,10],[10,78,7,11,"isArray"],[10,85,7,18],[10,86,7,19,"keyValuePairs"],[10,99,7,32],[10,100,7,33],[10,101,7,34],[10,102,7,35],[10,103,7,36],[10,105,8,4],[11,6,9,4],[11,12,9,10],[11,16,9,14,"Error"],[11,21,9,19],[11,22,10,6],[11,102,10,86],[11,103,11,5],[12,4,12,2],[13,4,14,2],[13,8,14,6,"callback"],[13,16,14,14],[13,20,14,18],[13,27,14,25,"callback"],[13,35,14,33],[13,40,14,38],[13,50,14,48],[13,52,14,50],[14,6,15,4],[14,10,15,8,"Array"],[14,15,15,13],[14,16,15,14,"isArray"],[14,23,15,21],[14,24,15,22,"callback"],[14,32,15,30],[14,33,15,31],[14,35,15,33],[15,8,16,6],[15,14,16,12],[15,18,16,16,"Error"],[15,23,16,21],[15,24,17,8],[15,165,17,149],[15,166,18,7],[16,6,19,4],[17,6,21,4],[17,12,21,10],[17,16,21,14,"Error"],[17,21,21,19],[17,22,22,6],[17,87,22,71],[17,88,23,5],[18,4,24,2],[19,2,25,0],[20,2,27,7],[20,11,27,16,"checkValidInput"],[20,26,27,31],[20,29,27,53],[21,4,27,53],[21,38,27,35,"input"],[21,43,27,40],[22,6,27,35,"input"],[22,11,27,40],[23,4,27,40],[24,4,28,2],[24,8,28,9,"key"],[24,11,28,12],[24,14,28,23,"input"],[24,19,28,28],[25,6,28,14,"value"],[25,11,28,19],[25,14,28,23,"input"],[25,19,28,28],[26,4,30,2],[26,8,30,6],[26,15,30,13,"key"],[26,18,30,16],[26,23,30,21],[26,31,30,29],[26,33,30,31],[27,6,31,4,"console"],[27,13,31,11],[27,14,31,12,"warn"],[27,18,31,16],[27,19,32,7],[27,43,32,30],[27,50,32,37,"key"],[27,53,32,41],[27,166,32,153,"key"],[27,169,32,157],[27,173,32,160],[27,174,33,5],[28,4,34,2],[29,4,36,2],[29,8,36,6,"input"],[29,13,36,11],[29,14,36,12,"length"],[29,20,36,18],[29,23,36,21],[29,24,36,22],[29,28,36,26],[29,35,36,33,"value"],[29,40,36,38],[29,45,36,43],[29,53,36,51],[29,55,36,53],[30,6,37,4],[30,10,37,8,"value"],[30,15,37,13],[30,19,37,17],[30,23,37,21],[30,25,37,23],[31,8,38,6],[31,14,38,12],[31,18,38,16,"Error"],[31,23,38,21],[31,24,39,9],[31,168,39,152,"value"],[31,173,39,158],[31,190,39,174,"key"],[31,193,39,178],[31,197,39,181],[31,198,40,7],[32,6,41,4],[32,7,41,5],[32,13,41,11],[33,8,42,6,"console"],[33,15,42,13],[33,16,42,14,"warn"],[33,20,42,18],[33,21,43,9],[33,58,43,45,"key"],[33,61,43,49],[33,169,43,156,"value"],[33,174,43,162],[33,191,43,178,"key"],[33,194,43,182],[33,198,43,185],[33,199,44,7],[34,6,45,4],[35,4,46,2],[36,2,47,0],[37,2,49,7],[37,11,49,16,"convertError"],[37,23,49,28],[37,24,49,29,"error"],[37,29,49,46],[37,31,49,62],[38,4,50,2],[38,8,50,6],[38,9,50,7,"error"],[38,14,50,12],[38,16,50,14],[39,6,51,4],[39,13,51,11],[39,17,51,15],[40,4,52,2],[41,4,54,2],[41,8,54,8,"out"],[41,11,54,11],[41,14,54,14],[41,18,54,18,"Error"],[41,23,54,23],[41,24,54,24,"error"],[41,29,54,29],[41,30,54,30,"message"],[41,37,54,37],[41,38,54,38],[42,4,55,3,"out"],[42,7,55,6],[42,8,55,15,"key"],[42,11,55,18],[42,14,55,21,"error"],[42,19,55,26],[42,20,55,27,"key"],[42,23,55,30],[43,4,56,2],[43,11,56,9,"out"],[43,14,56,12],[44,2,57,0],[45,2,59,7],[45,11,59,16,"convertErrors"],[45,24,59,29],[45,25,60,2,"errs"],[45,29,60,20],[45,31,61,38],[46,4,62,2],[46,8,62,8,"errors"],[46,14,62,14],[46,17,62,17,"ensureArray"],[46,28,62,28],[46,29,62,29,"errs"],[46,33,62,33],[46,34,62,34],[47,4,63,2],[47,11,63,9,"errors"],[47,17,63,15],[47,20,63,18,"errors"],[47,26,63,24],[47,27,63,25,"map"],[47,30,63,28],[47,31,63,29],[47,41,63,30,"e"],[47,42,63,31],[48,6,63,31],[48,13,63,36,"convertError"],[48,25,63,48],[48,26,63,49,"e"],[48,27,63,50],[48,28,63,51],[49,4,63,51],[49,6,63,52],[49,9,63,55],[49,13,63,59],[50,2,64,0],[51,2,66,0],[51,11,66,9,"ensureArray"],[51,22,66,20],[51,23,66,21,"e"],[51,24,66,48],[51,26,66,70],[52,4,67,2],[52,8,67,6,"Array"],[52,13,67,11],[52,14,67,12,"isArray"],[52,21,67,19],[52,22,67,20,"e"],[52,23,67,21],[52,24,67,22],[52,26,67,24],[53,6,68,4],[53,13,68,11,"e"],[53,14,68,12],[53,15,68,13,"length"],[53,21,68,19],[53,26,68,24],[53,27,68,25],[53,30,68,28],[53,34,68,32],[53,37,68,35,"e"],[53,38,68,36],[54,4,69,2],[54,5,69,3],[54,11,69,9],[54,15,69,13,"e"],[54,16,69,14],[54,18,69,16],[55,6,70,4],[55,13,70,11],[55,14,70,12,"e"],[55,15,70,13],[55,16,70,14],[56,4,71,2],[56,5,71,3],[56,11,71,9],[57,6,72,4],[57,13,72,11],[57,17,72,15],[58,4,73,2],[59,2,74,0],[60,0,74,1]],"functionMap":{"names":["<global>","checkValidArgs","checkValidInput","convertError","convertErrors","errors.map$argument_0","ensureArray"],"mappings":"AAA;OCE;CDsB;OEE;CFoB;OGE;CHQ;OIE;6BCI,sBD;CJC;AME;CNQ"}},"type":"js/module"}]}