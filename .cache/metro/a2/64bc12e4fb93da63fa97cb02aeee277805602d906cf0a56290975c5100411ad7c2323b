{"dependencies":[],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.INVALID_PATH_REGEX = exports.INVALID_KEY_REGEX = void 0;\n  exports.isValidKey = isValidKey;\n  exports.isValidPath = isValidPath;\n  exports.pathChild = pathChild;\n  exports.pathIsEmpty = pathIsEmpty;\n  exports.pathLastComponent = pathLastComponent;\n  exports.pathParent = pathParent;\n  exports.pathPieces = pathPieces;\n  exports.pathToUrlEncodedString = pathToUrlEncodedString;\n  exports.toFilePath = toFilePath;\n  function pathParent(path) {\n    if (path.length === 0) {\n      return null;\n    }\n    var index = path.lastIndexOf('/');\n    if (index <= 0) {\n      return null;\n    }\n    return path.slice(0, index);\n  }\n  function pathChild(path, childPath) {\n    var canonicalChildPath = pathPieces(childPath).join('/');\n    if (path.length === 0) {\n      return canonicalChildPath;\n    }\n    return `${path}/${canonicalChildPath}`;\n  }\n  function pathLastComponent(path) {\n    var index = path.lastIndexOf('/', path.length - 2);\n    if (index === -1) {\n      return path;\n    }\n    return path.slice(index + 1);\n  }\n  function pathPieces(path) {\n    return path.split('/').filter(function ($) {\n      return $.length > 0;\n    });\n  }\n  function pathIsEmpty(path) {\n    return !pathPieces(path).length;\n  }\n  function pathToUrlEncodedString(path) {\n    var pieces = pathPieces(path);\n    var pathString = '';\n    for (var i = 0; i < pieces.length; i++) {\n      pathString += `/${encodeURIComponent(String(pieces[i]))}`;\n    }\n    return pathString || '/';\n  }\n  var INVALID_PATH_REGEX = /[[\\].#$\\u0000-\\u001F\\u007F]/;\n  exports.INVALID_PATH_REGEX = INVALID_PATH_REGEX;\n  function isValidPath(path) {\n    return typeof path === 'string' && path.length !== 0 && !INVALID_PATH_REGEX.test(path);\n  }\n  var INVALID_KEY_REGEX = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\n  exports.INVALID_KEY_REGEX = INVALID_KEY_REGEX;\n  function isValidKey(key) {\n    return typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX.test(path);\n  }\n  function toFilePath(path) {\n    var _filePath = path.replace('file://', '');\n    if (_filePath.includes('%')) {\n      _filePath = decodeURIComponent(_filePath);\n    }\n    return _filePath;\n  }\n});","lineCount":72,"map":[[15,2,21,7],[15,11,21,16,"pathParent"],[15,21,21,26],[15,22,21,27,"path"],[15,26,21,31],[15,28,21,33],[16,4,22,2],[16,8,22,6,"path"],[16,12,22,10],[16,13,22,11,"length"],[16,19,22,17],[16,24,22,22],[16,25,22,23],[16,27,22,25],[17,6,23,4],[17,13,23,11],[17,17,23,15],[18,4,24,2],[19,4,26,2],[19,8,26,8,"index"],[19,13,26,13],[19,16,26,16,"path"],[19,20,26,20],[19,21,26,21,"lastIndexOf"],[19,32,26,32],[19,33,26,33],[19,36,26,36],[19,37,26,37],[20,4,27,2],[20,8,27,6,"index"],[20,13,27,11],[20,17,27,15],[20,18,27,16],[20,20,27,18],[21,6,28,4],[21,13,28,11],[21,17,28,15],[22,4,29,2],[23,4,31,2],[23,11,31,9,"path"],[23,15,31,13],[23,16,31,14,"slice"],[23,21,31,19],[23,22,31,20],[23,23,31,21],[23,25,31,23,"index"],[23,30,31,28],[23,31,31,29],[24,2,32,0],[25,2,37,7],[25,11,37,16,"pathChild"],[25,20,37,25],[25,21,37,26,"path"],[25,25,37,30],[25,27,37,32,"childPath"],[25,36,37,41],[25,38,37,43],[26,4,38,2],[26,8,38,8,"canonicalChildPath"],[26,26,38,26],[26,29,38,29,"pathPieces"],[26,39,38,39],[26,40,38,40,"childPath"],[26,49,38,49],[26,50,38,50],[26,51,38,51,"join"],[26,55,38,55],[26,56,38,56],[26,59,38,59],[26,60,38,60],[27,4,40,2],[27,8,40,6,"path"],[27,12,40,10],[27,13,40,11,"length"],[27,19,40,17],[27,24,40,22],[27,25,40,23],[27,27,40,25],[28,6,41,4],[28,13,41,11,"canonicalChildPath"],[28,31,41,29],[29,4,42,2],[30,4,44,2],[30,11,44,10],[30,14,44,12,"path"],[30,18,44,17],[30,22,44,20,"canonicalChildPath"],[30,40,44,39],[30,42,44,40],[31,2,45,0],[32,2,50,7],[32,11,50,16,"pathLastComponent"],[32,28,50,33],[32,29,50,34,"path"],[32,33,50,38],[32,35,50,40],[33,4,51,2],[33,8,51,8,"index"],[33,13,51,13],[33,16,51,16,"path"],[33,20,51,20],[33,21,51,21,"lastIndexOf"],[33,32,51,32],[33,33,51,33],[33,36,51,36],[33,38,51,38,"path"],[33,42,51,42],[33,43,51,43,"length"],[33,49,51,49],[33,52,51,52],[33,53,51,53],[33,54,51,54],[34,4,52,2],[34,8,52,6,"index"],[34,13,52,11],[34,18,52,16],[34,19,52,17],[34,20,52,18],[34,22,52,20],[35,6,53,4],[35,13,53,11,"path"],[35,17,53,15],[36,4,54,2],[37,4,56,2],[37,11,56,9,"path"],[37,15,56,13],[37,16,56,14,"slice"],[37,21,56,19],[37,22,56,20,"index"],[37,27,56,25],[37,30,56,28],[37,31,56,29],[37,32,56,30],[38,2,57,0],[39,2,64,7],[39,11,64,16,"pathPieces"],[39,21,64,26],[39,22,64,27,"path"],[39,26,64,31],[39,28,64,33],[40,4,65,2],[40,11,65,9,"path"],[40,15,65,13],[40,16,65,14,"split"],[40,21,65,19],[40,22,65,20],[40,25,65,23],[40,26,65,24],[40,27,65,25,"filter"],[40,33,65,31],[40,34,65,32],[40,44,65,32,"$"],[40,45,65,33],[41,6,65,33],[41,13,65,37,"$"],[41,14,65,38],[41,15,65,39,"length"],[41,21,65,45],[41,24,65,48],[41,25,65,49],[42,4,65,49],[42,6,65,50],[43,2,66,0],[44,2,73,7],[44,11,73,16,"pathIsEmpty"],[44,22,73,27],[44,23,73,28,"path"],[44,27,73,32],[44,29,73,34],[45,4,74,2],[45,11,74,9],[45,12,74,10,"pathPieces"],[45,22,74,20],[45,23,74,21,"path"],[45,27,74,25],[45,28,74,26],[45,29,74,27,"length"],[45,35,74,33],[46,2,75,0],[47,2,82,7],[47,11,82,16,"pathToUrlEncodedString"],[47,33,82,38],[47,34,82,39,"path"],[47,38,82,43],[47,40,82,45],[48,4,83,2],[48,8,83,8,"pieces"],[48,14,83,14],[48,17,83,17,"pathPieces"],[48,27,83,27],[48,28,83,28,"path"],[48,32,83,32],[48,33,83,33],[49,4,84,2],[49,8,84,6,"pathString"],[49,18,84,16],[49,21,84,19],[49,23,84,21],[50,4,85,2],[50,9,85,7],[50,13,85,11,"i"],[50,14,85,12],[50,17,85,15],[50,18,85,16],[50,20,85,18,"i"],[50,21,85,19],[50,24,85,22,"pieces"],[50,30,85,28],[50,31,85,29,"length"],[50,37,85,35],[50,39,85,37,"i"],[50,40,85,38],[50,42,85,40],[50,44,85,42],[51,6,86,4,"pathString"],[51,16,86,14],[51,20,86,19],[51,24,86,22,"encodeURIComponent"],[51,42,86,40],[51,43,86,41,"String"],[51,49,86,47],[51,50,86,48,"pieces"],[51,56,86,54],[51,57,86,55,"i"],[51,58,86,56],[51,59,86,57],[51,60,86,58],[51,61,86,60],[51,63,86,61],[52,4,87,2],[53,4,88,2],[53,11,88,9,"pathString"],[53,21,88,19],[53,25,88,23],[53,28,88,26],[54,2,89,0],[55,2,92,7],[55,6,92,13,"INVALID_PATH_REGEX"],[55,24,92,31],[55,27,92,34],[55,56,92,63],[56,2,92,64],[57,2,99,7],[57,11,99,16,"isValidPath"],[57,22,99,27],[57,23,99,28,"path"],[57,27,99,32],[57,29,99,34],[58,4,100,2],[58,11,100,9],[58,18,100,16,"path"],[58,22,100,20],[58,27,100,25],[58,35,100,33],[58,39,100,37,"path"],[58,43,100,41],[58,44,100,42,"length"],[58,50,100,48],[58,55,100,53],[58,56,100,54],[58,60,100,58],[58,61,100,59,"INVALID_PATH_REGEX"],[58,79,100,77],[58,80,100,78,"test"],[58,84,100,82],[58,85,100,83,"path"],[58,89,100,87],[58,90,100,88],[59,2,101,0],[60,2,104,7],[60,6,104,13,"INVALID_KEY_REGEX"],[60,23,104,30],[60,26,104,33],[60,58,104,65],[61,2,104,66],[62,2,111,7],[62,11,111,16,"isValidKey"],[62,21,111,26],[62,22,111,27,"key"],[62,25,111,30],[62,27,111,32],[63,4,112,2],[63,11,112,9],[63,18,112,16,"key"],[63,21,112,19],[63,26,112,24],[63,34,112,32],[63,38,112,36,"key"],[63,41,112,39],[63,42,112,40,"length"],[63,48,112,46],[63,53,112,51],[63,54,112,52],[63,58,112,56],[63,59,112,57,"INVALID_KEY_REGEX"],[63,76,112,74],[63,77,112,75,"test"],[63,81,112,79],[63,82,112,80,"path"],[63,86,112,84],[63,87,112,85],[64,2,113,0],[65,2,120,7],[65,11,120,16,"toFilePath"],[65,21,120,26],[65,22,120,27,"path"],[65,26,120,31],[65,28,120,33],[66,4,121,2],[66,8,121,6,"_filePath"],[66,17,121,15],[66,20,121,18,"path"],[66,24,121,22],[66,25,121,23,"replace"],[66,32,121,30],[66,33,121,31],[66,42,121,40],[66,44,121,42],[66,46,121,44],[66,47,121,45],[67,4,122,2],[67,8,122,6,"_filePath"],[67,17,122,15],[67,18,122,16,"includes"],[67,26,122,24],[67,27,122,25],[67,30,122,28],[67,31,122,29],[67,33,122,31],[68,6,123,4,"_filePath"],[68,15,123,13],[68,18,123,16,"decodeURIComponent"],[68,36,123,34],[68,37,123,35,"_filePath"],[68,46,123,44],[68,47,123,45],[69,4,124,2],[70,4,125,2],[70,11,125,9,"_filePath"],[70,20,125,18],[71,2,126,0],[72,0,126,1]],"functionMap":{"names":["<global>","pathParent","pathChild","pathLastComponent","pathPieces","split.filter$argument_0","pathIsEmpty","pathToUrlEncodedString","isValidPath","isValidKey","toFilePath"],"mappings":"AAA;OCoB;CDW;OEK;CFQ;OGK;CHO;OIO;gCCC,iBD;CJC;OMO;CNE;OOO;CPO;OQU;CRE;OSU;CTE;OUO;CVM"}},"type":"js/module"}]}