{"dependencies":[],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.Bezier = void 0;\n  var _worklet_11048418097672_init_data = {\n    code: \"function Bezier(mX1, mY1, mX2, mY2) {\\n  const NEWTON_ITERATIONS = 4;\\n  const NEWTON_MIN_SLOPE = 0.001;\\n  const SUBDIVISION_PRECISION = 0.0000001;\\n  const SUBDIVISION_MAX_ITERATIONS = 10;\\n  const kSplineTableSize = 11;\\n  const kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);\\n  function A(aA1, aA2) {\\n    'worklet';\\n\\n    return 1.0 - 3.0 * aA2 + 3.0 * aA1;\\n  }\\n  function B(aA1, aA2) {\\n    'worklet';\\n\\n    return 3.0 * aA2 - 6.0 * aA1;\\n  }\\n  function C(aA1) {\\n    'worklet';\\n\\n    return 3.0 * aA1;\\n  }\\n  function calcBezier(aT, aA1, aA2) {\\n    'worklet';\\n\\n    return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;\\n  }\\n  function getSlope(aT, aA1, aA2) {\\n    'worklet';\\n\\n    return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);\\n  }\\n  function binarySubdivide(aX, aA, aB, mX1, mX2) {\\n    'worklet';\\n\\n    let currentX;\\n    let currentT;\\n    let i = 0;\\n    do {\\n      currentT = aA + (aB - aA) / 2.0;\\n      currentX = calcBezier(currentT, mX1, mX2) - aX;\\n      if (currentX > 0.0) {\\n        aB = currentT;\\n      } else {\\n        aA = currentT;\\n      }\\n    } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);\\n    return currentT;\\n  }\\n  function newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {\\n    'worklet';\\n\\n    for (let i = 0; i < NEWTON_ITERATIONS; ++i) {\\n      const currentSlope = getSlope(aGuessT, mX1, mX2);\\n      if (currentSlope === 0.0) {\\n        return aGuessT;\\n      }\\n      const currentX = calcBezier(aGuessT, mX1, mX2) - aX;\\n      aGuessT -= currentX / currentSlope;\\n    }\\n    return aGuessT;\\n  }\\n  function LinearEasing(x) {\\n    'worklet';\\n\\n    return x;\\n  }\\n  if (!(mX1 >= 0 && mX1 <= 1 && mX2 >= 0 && mX2 <= 1)) {\\n    throw new Error('bezier x values must be in [0, 1] range');\\n  }\\n  if (mX1 === mY1 && mX2 === mY2) {\\n    return LinearEasing;\\n  }\\n  const sampleValues = new Array(kSplineTableSize);\\n  for (let i = 0; i < kSplineTableSize; ++i) {\\n    sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);\\n  }\\n  function getTForX(aX) {\\n    'worklet';\\n\\n    let intervalStart = 0.0;\\n    let currentSample = 1;\\n    const lastSample = kSplineTableSize - 1;\\n    for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {\\n      intervalStart += kSampleStepSize;\\n    }\\n    --currentSample;\\n    const dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);\\n    const guessForT = intervalStart + dist * kSampleStepSize;\\n    const initialSlope = getSlope(guessForT, mX1, mX2);\\n    if (initialSlope >= NEWTON_MIN_SLOPE) {\\n      return newtonRaphsonIterate(aX, guessForT, mX1, mX2);\\n    } else if (initialSlope === 0.0) {\\n      return guessForT;\\n    } else {\\n      return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);\\n    }\\n  }\\n  return function BezierEasing(x) {\\n    'worklet';\\n\\n    if (mX1 === mY1 && mX2 === mY2) {\\n      return x;\\n    }\\n    if (x === 0) {\\n      return 0;\\n    }\\n    if (x === 1) {\\n      return 1;\\n    }\\n    return calcBezier(getTForX(x), mY1, mY2);\\n  };\\n}\",\n    location: \"/Users/alijawish/Desktop/BIM/react-native-boilerplate/node_modules/react-native-reanimated/src/reanimated2/Bezier.ts\",\n    sourceMap: \"{\\\"version\\\":3,\\\"mappings\\\":\\\"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\\\",\\\"names\\\":[\\\"Bezier\\\",\\\"mX1\\\",\\\"mY1\\\",\\\"mX2\\\",\\\"mY2\\\",\\\"NEWTON_ITERATIONS\\\",\\\"NEWTON_MIN_SLOPE\\\",\\\"SUBDIVISION_PRECISION\\\",\\\"SUBDIVISION_MAX_ITERATIONS\\\",\\\"kSplineTableSize\\\",\\\"kSampleStepSize\\\",\\\"A\\\",\\\"aA1\\\",\\\"aA2\\\",\\\"B\\\",\\\"C\\\",\\\"calcBezier\\\",\\\"aT\\\",\\\"getSlope\\\",\\\"binarySubdivide\\\",\\\"aX\\\",\\\"aA\\\",\\\"aB\\\",\\\"currentX\\\",\\\"currentT\\\",\\\"i\\\",\\\"Math\\\",\\\"abs\\\",\\\"newtonRaphsonIterate\\\",\\\"aGuessT\\\",\\\"currentSlope\\\",\\\"LinearEasing\\\",\\\"x\\\",\\\"Error\\\",\\\"sampleValues\\\",\\\"Array\\\",\\\"getTForX\\\",\\\"intervalStart\\\",\\\"currentSample\\\",\\\"lastSample\\\",\\\"dist\\\",\\\"guessForT\\\",\\\"initialSlope\\\",\\\"BezierEasing\\\"],\\\"sources\\\":[\\\"/Users/alijawish/Desktop/BIM/react-native-boilerplate/node_modules/react-native-reanimated/src/reanimated2/Bezier.ts\\\"]}\"\n  };\n  var _worklet_3374392297911_init_data = {\n    code: \"function A(aA1, aA2) {\\n  return 1.0 - 3.0 * aA2 + 3.0 * aA1;\\n}\",\n    location: \"/Users/alijawish/Desktop/BIM/react-native-boilerplate/node_modules/react-native-reanimated/src/reanimated2/Bezier.ts\",\n    sourceMap: \"{\\\"version\\\":3,\\\"mappings\\\":\\\"AAwBE,UAAUA,CAACC,KAAWC,GAAEA,EAAY;EAElC,OAAO,GAAG,GAAG,GAAG,GAAGA,GAAG,GAAG,GAAG,GAAGD,GAAG;AACpC\\\",\\\"names\\\":[\\\"A\\\",\\\"aA1\\\",\\\"aA2\\\"],\\\"sources\\\":[\\\"/Users/alijawish/Desktop/BIM/react-native-boilerplate/node_modules/react-native-reanimated/src/reanimated2/Bezier.ts\\\"]}\"\n  };\n  var _worklet_16740236581141_init_data = {\n    code: \"function B(aA1, aA2) {\\n  return 3.0 * aA2 - 6.0 * aA1;\\n}\",\n    location: \"/Users/alijawish/Desktop/BIM/react-native-boilerplate/node_modules/react-native-reanimated/src/reanimated2/Bezier.ts\",\n    sourceMap: \"{\\\"version\\\":3,\\\"mappings\\\":\\\"AA4BE,UAAUA,CAACC,KAAWC,GAAEA,EAAY;EAElC,OAAO,GAAG,GAAGA,GAAG,GAAG,GAAG,GAAGD,GAAG;AAC9B\\\",\\\"names\\\":[\\\"B\\\",\\\"aA1\\\",\\\"aA2\\\"],\\\"sources\\\":[\\\"/Users/alijawish/Desktop/BIM/react-native-boilerplate/node_modules/react-native-reanimated/src/reanimated2/Bezier.ts\\\"]}\"\n  };\n  var _worklet_17250667303223_init_data = {\n    code: \"function C(aA1) {\\n  return 3.0 * aA1;\\n}\",\n    location: \"/Users/alijawish/Desktop/BIM/react-native-boilerplate/node_modules/react-native-reanimated/src/reanimated2/Bezier.ts\",\n    sourceMap: \"{\\\"version\\\":3,\\\"mappings\\\":\\\"AAgCE,UAAUA,CAACC,KAAW;EAEpB,OAAO,GAAG,GAAGA,GAAG;AAClB\\\",\\\"names\\\":[\\\"C\\\",\\\"aA1\\\"],\\\"sources\\\":[\\\"/Users/alijawish/Desktop/BIM/react-native-boilerplate/node_modules/react-native-reanimated/src/reanimated2/Bezier.ts\\\"]}\"\n  };\n  var _worklet_3336129670125_init_data = {\n    code: \"function calcBezier(aT, aA1, aA2) {\\n  const {\\n    A,\\n    B,\\n    C\\n  } = this._closure;\\n  return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;\\n}\",\n    location: \"/Users/alijawish/Desktop/BIM/react-native-boilerplate/node_modules/react-native-reanimated/src/reanimated2/Bezier.ts\",\n    sourceMap: \"{\\\"version\\\":3,\\\"mappings\\\":\\\"AAqCE;EAAA;IAAA;IAAA;IAAA;EAAA;EAAA;AACA\\\",\\\"names\\\":[],\\\"sources\\\":[\\\"/Users/alijawish/Desktop/BIM/react-native-boilerplate/node_modules/react-native-reanimated/src/reanimated2/Bezier.ts\\\"]}\"\n  };\n  var _worklet_6461718455249_init_data = {\n    code: \"function getSlope(aT, aA1, aA2) {\\n  const {\\n    A,\\n    B,\\n    C\\n  } = this._closure;\\n  return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);\\n}\",\n    location: \"/Users/alijawish/Desktop/BIM/react-native-boilerplate/node_modules/react-native-reanimated/src/reanimated2/Bezier.ts\",\n    sourceMap: \"{\\\"version\\\":3,\\\"mappings\\\":\\\"AA2CE;EAAA;IAAA;IAAA;IAAA;EAAA;EAAA;AACA\\\",\\\"names\\\":[],\\\"sources\\\":[\\\"/Users/alijawish/Desktop/BIM/react-native-boilerplate/node_modules/react-native-reanimated/src/reanimated2/Bezier.ts\\\"]}\"\n  };\n  var _worklet_249053909510_init_data = {\n    code: \"function binarySubdivide(aX, aA, aB, mX1, mX2) {\\n  const {\\n    SUBDIVISION_PRECISION,\\n    SUBDIVISION_MAX_ITERATIONS,\\n    calcBezier\\n  } = this._closure;\\n  let currentX;\\n  let currentT;\\n  let i = 0;\\n  do {\\n    currentT = aA + (aB - aA) / 2.0;\\n    currentX = calcBezier(currentT, mX1, mX2) - aX;\\n    if (currentX > 0.0) {\\n      aB = currentT;\\n    } else {\\n      aA = currentT;\\n    }\\n  } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);\\n  return currentT;\\n}\",\n    location: \"/Users/alijawish/Desktop/BIM/react-native-boilerplate/node_modules/react-native-reanimated/src/reanimated2/Bezier.ts\",\n    sourceMap: \"{\\\"version\\\":3,\\\"mappings\\\":\\\"AAiDE,wBAASA,CACPC,IAAUC,EACVA,EAAUC,EACVA,EAAUC,GACVA,EAAWC,GACXA,EACD;EAAA;IAAA;IAAA;IAAA;EAAA;EAEC,IAAIC,QAAQ;EACZ,IAAIC,QAAQ;EACZ,IAAIC,CAAC,GAAG,CAAC;EACT,GAAG;IACDD,QAAQ,GAAGL,EAAE,GAAG,CAACC,EAAE,GAAGD,EAAE,IAAI,GAAG;IAC/BI,QAAQ,GAAGG,UAAU,CAACF,QAAQ,EAAEH,GAAG,EAAEC,GAAG,CAAC,GAAGJ,EAAE;IAC9C,IAAIK,QAAQ,GAAG,GAAG,EAAE;MAClBH,EAAE,GAAGI,QAAQ;IACf,CAAC,MAAM;MACLL,EAAE,GAAGK,QAAQ;IACf;EACF,CAAC,QACCG,IAAI,CAACC,GAAG,CAACL,QAAQ,CAAC,GAAGM,qBAAqB,IAC1C,EAAEJ,CAAC,GAAGK,0BAA0B;EAElC,OAAON,QAAQ;AACjB\\\",\\\"names\\\":[\\\"binarySubdivide\\\",\\\"aX\\\",\\\"aA\\\",\\\"aB\\\",\\\"mX1\\\",\\\"mX2\\\",\\\"currentX\\\",\\\"currentT\\\",\\\"i\\\",\\\"calcBezier\\\",\\\"Math\\\",\\\"abs\\\",\\\"SUBDIVISION_PRECISION\\\",\\\"SUBDIVISION_MAX_ITERATIONS\\\"],\\\"sources\\\":[\\\"/Users/alijawish/Desktop/BIM/react-native-boilerplate/node_modules/react-native-reanimated/src/reanimated2/Bezier.ts\\\"]}\"\n  };\n  var _worklet_303592406761_init_data = {\n    code: \"function newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {\\n  const {\\n    NEWTON_ITERATIONS,\\n    getSlope,\\n    calcBezier\\n  } = this._closure;\\n  for (let i = 0; i < NEWTON_ITERATIONS; ++i) {\\n    const currentSlope = getSlope(aGuessT, mX1, mX2);\\n    if (currentSlope === 0.0) {\\n      return aGuessT;\\n    }\\n    const currentX = calcBezier(aGuessT, mX1, mX2) - aX;\\n    aGuessT -= currentX / currentSlope;\\n  }\\n  return aGuessT;\\n}\",\n    location: \"/Users/alijawish/Desktop/BIM/react-native-boilerplate/node_modules/react-native-reanimated/src/reanimated2/Bezier.ts\",\n    sourceMap: \"{\\\"version\\\":3,\\\"mappings\\\":\\\"AA2EE,6BAASA,CACPC,IAAUC,OACVA,EAAeC,GACfA,EAAWC,GACXA,EACD;EAAA;IAAA;IAAA;IAAA;EAAA;EAEC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGC,iBAAiB,EAAE,EAAED,CAAC,EAAE;IAC1C,MAAME,YAAY,GAAGC,QAAQ,CAACN,OAAO,EAAEC,GAAG,EAAEC,GAAG,CAAC;IAChD,IAAIG,YAAY,KAAK,GAAG,EAAE;MACxB,OAAOL,OAAO;IAChB;IACA,MAAMO,QAAQ,GAAGC,UAAU,CAACR,OAAO,EAAEC,GAAG,EAAEC,GAAG,CAAC,GAAGH,EAAE;IACnDC,OAAO,IAAIO,QAAQ,GAAGF,YAAY;EACpC;EACA,OAAOL,OAAO;AAChB\\\",\\\"names\\\":[\\\"newtonRaphsonIterate\\\",\\\"aX\\\",\\\"aGuessT\\\",\\\"mX1\\\",\\\"mX2\\\",\\\"i\\\",\\\"NEWTON_ITERATIONS\\\",\\\"currentSlope\\\",\\\"getSlope\\\",\\\"currentX\\\",\\\"calcBezier\\\"],\\\"sources\\\":[\\\"/Users/alijawish/Desktop/BIM/react-native-boilerplate/node_modules/react-native-reanimated/src/reanimated2/Bezier.ts\\\"]}\"\n  };\n  var _worklet_11601588428153_init_data = {\n    code: \"function LinearEasing(x) {\\n  return x;\\n}\",\n    location: \"/Users/alijawish/Desktop/BIM/react-native-boilerplate/node_modules/react-native-reanimated/src/reanimated2/Bezier.ts\",\n    sourceMap: \"{\\\"version\\\":3,\\\"mappings\\\":\\\"AA6FE,qBAASA,CAAaC,CAACA,EAAS;EAE9B,OAAOA,CAAC;AACV\\\",\\\"names\\\":[\\\"LinearEasing\\\",\\\"x\\\"],\\\"sources\\\":[\\\"/Users/alijawish/Desktop/BIM/react-native-boilerplate/node_modules/react-native-reanimated/src/reanimated2/Bezier.ts\\\"]}\"\n  };\n  var _worklet_16767251613109_init_data = {\n    code: \"function getTForX(aX) {\\n  const {\\n    kSplineTableSize,\\n    sampleValues,\\n    kSampleStepSize,\\n    getSlope,\\n    mX1,\\n    mX2,\\n    NEWTON_MIN_SLOPE,\\n    newtonRaphsonIterate,\\n    binarySubdivide\\n  } = this._closure;\\n  let intervalStart = 0.0;\\n  let currentSample = 1;\\n  const lastSample = kSplineTableSize - 1;\\n  for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {\\n    intervalStart += kSampleStepSize;\\n  }\\n  --currentSample;\\n  const dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);\\n  const guessForT = intervalStart + dist * kSampleStepSize;\\n  const initialSlope = getSlope(guessForT, mX1, mX2);\\n  if (initialSlope >= NEWTON_MIN_SLOPE) {\\n    return newtonRaphsonIterate(aX, guessForT, mX1, mX2);\\n  } else if (initialSlope === 0.0) {\\n    return guessForT;\\n  } else {\\n    return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);\\n  }\\n}\",\n    location: \"/Users/alijawish/Desktop/BIM/react-native-boilerplate/node_modules/react-native-reanimated/src/reanimated2/Bezier.ts\",\n    sourceMap: \"{\\\"version\\\":3,\\\"mappings\\\":\\\"AAwHE,iBAASA,CAASC,IAAW;EAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;EAAA;EAE3B,IAAIC,aAAa,GAAG,GAAG;EACvB,IAAIC,aAAa,GAAG,CAAC;EACrB,MAAMC,UAAU,GAAGC,gBAAgB,GAAG,CAAC;EAEvC,OAEEF,aAAa,KAAKC,UAAU,IAAIE,YAAY,CAACH,aAAa,CAAC,IAAIF,EAAE,EACjE,EAAEE,aAAa,EACf;IACAD,aAAa,IAAIK,eAAe;EAClC;EACA,EAAEJ,aAAa;EAGf,MAAMK,IAAI,GACR,CAACP,EAAE,GAAGK,YAAY,CAACH,aAAa,CAAC,KAChCG,YAAY,CAACH,aAAa,GAAG,CAAC,CAAC,GAAGG,YAAY,CAACH,aAAa,CAAC,CAAC;EACjE,MAAMM,SAAS,GAAGP,aAAa,GAAGM,IAAI,GAAGD,eAAe;EAExD,MAAMG,YAAY,GAAGC,QAAQ,CAACF,SAAS,EAAEG,GAAG,EAAEC,GAAG,CAAC;EAClD,IAAIH,YAAY,IAAII,gBAAgB,EAAE;IACpC,OAAOC,oBAAoB,CAACd,EAAE,EAAEQ,SAAS,EAAEG,GAAG,EAAEC,GAAG,CAAC;EACtD,CAAC,MAAM,IAAIH,YAAY,KAAK,GAAG,EAAE;IAC/B,OAAOD,SAAS;EAClB,CAAC,MAAM;IACL,OAAOO,eAAe,CACpBf,EAAE,EACFC,aAAa,EACbA,aAAa,GAAGK,eAAe,EAC/BK,GAAG,EACHC,GAAG,CACJ;EACH;AACF\\\",\\\"names\\\":[\\\"getTForX\\\",\\\"aX\\\",\\\"intervalStart\\\",\\\"currentSample\\\",\\\"lastSample\\\",\\\"kSplineTableSize\\\",\\\"sampleValues\\\",\\\"kSampleStepSize\\\",\\\"dist\\\",\\\"guessForT\\\",\\\"initialSlope\\\",\\\"getSlope\\\",\\\"mX1\\\",\\\"mX2\\\",\\\"NEWTON_MIN_SLOPE\\\",\\\"newtonRaphsonIterate\\\",\\\"binarySubdivide\\\"],\\\"sources\\\":[\\\"/Users/alijawish/Desktop/BIM/react-native-boilerplate/node_modules/react-native-reanimated/src/reanimated2/Bezier.ts\\\"]}\"\n  };\n  var _worklet_11458292201024_init_data = {\n    code: \"function BezierEasing(x) {\\n  const {\\n    mX1,\\n    mY1,\\n    mX2,\\n    mY2,\\n    calcBezier,\\n    getTForX\\n  } = this._closure;\\n  if (mX1 === mY1 && mX2 === mY2) {\\n    return x;\\n  }\\n  if (x === 0) {\\n    return 0;\\n  }\\n  if (x === 1) {\\n    return 1;\\n  }\\n  return calcBezier(getTForX(x), mY1, mY2);\\n}\",\n    location: \"/Users/alijawish/Desktop/BIM/react-native-boilerplate/node_modules/react-native-reanimated/src/reanimated2/Bezier.ts\",\n    sourceMap: \"{\\\"version\\\":3,\\\"mappings\\\":\\\"AA6JS,qBAASA,CAAaC,CAACA;EAAAA;IAAAA;IAAAA;IAAAA;IAAAA;IAAAA;IAAAA;EAAAA;EAE5B,IAAIC,GAAG,KAAKC,GAAG,IAAIC,GAAG,KAAKC,GAAG,EAAE;IAC9B,OAAOJ,CAAC;EACV;EAEA,IAAIA,CAAC,KAAK,CAAC,EAAE;IACX,OAAO,CAAC;EACV;EACA,IAAIA,CAAC,KAAK,CAAC,EAAE;IACX,OAAO,CAAC;EACV;EACA,OAAOK,UAAU,CAACC,QAAQ,CAACN,CAAC,CAAC,EAAEE,GAAG,EAAEE,GAAG,CAAC;AAC1C\\\",\\\"names\\\":[\\\"BezierEasing\\\",\\\"x\\\",\\\"mX1\\\",\\\"mY1\\\",\\\"mX2\\\",\\\"mY2\\\",\\\"calcBezier\\\",\\\"getTForX\\\"],\\\"sources\\\":[\\\"/Users/alijawish/Desktop/BIM/react-native-boilerplate/node_modules/react-native-reanimated/src/reanimated2/Bezier.ts\\\"]}\"\n  };\n  var Bezier = function () {\n    var _e = [new Error(), 1, -20];\n    var _f = function _f(mX1, mY1, mX2, mY2) {\n      var NEWTON_ITERATIONS = 4;\n      var NEWTON_MIN_SLOPE = 0.001;\n      var SUBDIVISION_PRECISION = 0.0000001;\n      var SUBDIVISION_MAX_ITERATIONS = 10;\n      var kSplineTableSize = 11;\n      var kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);\n      var A = function () {\n        var _e = [new Error(), 1, -20];\n        var _f = function _f(aA1, aA2) {\n          return 1.0 - 3.0 * aA2 + 3.0 * aA1;\n        };\n        _f._closure = {};\n        _f.__initData = _worklet_3374392297911_init_data;\n        _f.__workletHash = 3374392297911;\n        _f.__stackDetails = _e;\n        return _f;\n      }();\n      var B = function () {\n        var _e = [new Error(), 1, -20];\n        var _f = function _f(aA1, aA2) {\n          return 3.0 * aA2 - 6.0 * aA1;\n        };\n        _f._closure = {};\n        _f.__initData = _worklet_16740236581141_init_data;\n        _f.__workletHash = 16740236581141;\n        _f.__stackDetails = _e;\n        return _f;\n      }();\n      var C = function () {\n        var _e = [new Error(), 1, -20];\n        var _f = function _f(aA1) {\n          return 3.0 * aA1;\n        };\n        _f._closure = {};\n        _f.__initData = _worklet_17250667303223_init_data;\n        _f.__workletHash = 17250667303223;\n        _f.__stackDetails = _e;\n        return _f;\n      }();\n      var calcBezier = function () {\n        var _e = [new Error(), -4, -20];\n        var _f = function _f(aT, aA1, aA2) {\n          return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;\n        };\n        _f._closure = {\n          A: A,\n          B: B,\n          C: C\n        };\n        _f.__initData = _worklet_3336129670125_init_data;\n        _f.__workletHash = 3336129670125;\n        _f.__stackDetails = _e;\n        return _f;\n      }();\n      var getSlope = function () {\n        var _e = [new Error(), -4, -20];\n        var _f = function _f(aT, aA1, aA2) {\n          return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);\n        };\n        _f._closure = {\n          A: A,\n          B: B,\n          C: C\n        };\n        _f.__initData = _worklet_6461718455249_init_data;\n        _f.__workletHash = 6461718455249;\n        _f.__stackDetails = _e;\n        return _f;\n      }();\n      var binarySubdivide = function () {\n        var _e = [new Error(), -4, -20];\n        var _f = function _f(aX, aA, aB, mX1, mX2) {\n          var currentX;\n          var currentT;\n          var i = 0;\n          do {\n            currentT = aA + (aB - aA) / 2.0;\n            currentX = calcBezier(currentT, mX1, mX2) - aX;\n            if (currentX > 0.0) {\n              aB = currentT;\n            } else {\n              aA = currentT;\n            }\n          } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);\n          return currentT;\n        };\n        _f._closure = {\n          SUBDIVISION_PRECISION: SUBDIVISION_PRECISION,\n          SUBDIVISION_MAX_ITERATIONS: SUBDIVISION_MAX_ITERATIONS,\n          calcBezier: calcBezier\n        };\n        _f.__initData = _worklet_249053909510_init_data;\n        _f.__workletHash = 249053909510;\n        _f.__stackDetails = _e;\n        return _f;\n      }();\n      var newtonRaphsonIterate = function () {\n        var _e = [new Error(), -4, -20];\n        var _f = function _f(aX, aGuessT, mX1, mX2) {\n          for (var i = 0; i < NEWTON_ITERATIONS; ++i) {\n            var currentSlope = getSlope(aGuessT, mX1, mX2);\n            if (currentSlope === 0.0) {\n              return aGuessT;\n            }\n            var currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n            aGuessT -= currentX / currentSlope;\n          }\n          return aGuessT;\n        };\n        _f._closure = {\n          NEWTON_ITERATIONS: NEWTON_ITERATIONS,\n          getSlope: getSlope,\n          calcBezier: calcBezier\n        };\n        _f.__initData = _worklet_303592406761_init_data;\n        _f.__workletHash = 303592406761;\n        _f.__stackDetails = _e;\n        return _f;\n      }();\n      var LinearEasing = function () {\n        var _e = [new Error(), 1, -20];\n        var _f = function _f(x) {\n          return x;\n        };\n        _f._closure = {};\n        _f.__initData = _worklet_11601588428153_init_data;\n        _f.__workletHash = 11601588428153;\n        _f.__stackDetails = _e;\n        return _f;\n      }();\n      if (!(mX1 >= 0 && mX1 <= 1 && mX2 >= 0 && mX2 <= 1)) {\n        throw new Error('bezier x values must be in [0, 1] range');\n      }\n      if (mX1 === mY1 && mX2 === mY2) {\n        return LinearEasing;\n      }\n      var sampleValues = new Array(kSplineTableSize);\n      for (var i = 0; i < kSplineTableSize; ++i) {\n        sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);\n      }\n      var getTForX = function () {\n        var _e = [new Error(), -10, -20];\n        var _f = function _f(aX) {\n          var intervalStart = 0.0;\n          var currentSample = 1;\n          var lastSample = kSplineTableSize - 1;\n          for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {\n            intervalStart += kSampleStepSize;\n          }\n          --currentSample;\n          var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);\n          var guessForT = intervalStart + dist * kSampleStepSize;\n          var initialSlope = getSlope(guessForT, mX1, mX2);\n          if (initialSlope >= NEWTON_MIN_SLOPE) {\n            return newtonRaphsonIterate(aX, guessForT, mX1, mX2);\n          } else if (initialSlope === 0.0) {\n            return guessForT;\n          } else {\n            return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);\n          }\n        };\n        _f._closure = {\n          kSplineTableSize: kSplineTableSize,\n          sampleValues: sampleValues,\n          kSampleStepSize: kSampleStepSize,\n          getSlope: getSlope,\n          mX1: mX1,\n          mX2: mX2,\n          NEWTON_MIN_SLOPE: NEWTON_MIN_SLOPE,\n          newtonRaphsonIterate: newtonRaphsonIterate,\n          binarySubdivide: binarySubdivide\n        };\n        _f.__initData = _worklet_16767251613109_init_data;\n        _f.__workletHash = 16767251613109;\n        _f.__stackDetails = _e;\n        return _f;\n      }();\n      return function () {\n        var _e = [new Error(), -7, -20];\n        var _f = function _f(x) {\n          if (mX1 === mY1 && mX2 === mY2) {\n            return x;\n          }\n          if (x === 0) {\n            return 0;\n          }\n          if (x === 1) {\n            return 1;\n          }\n          return calcBezier(getTForX(x), mY1, mY2);\n        };\n        _f._closure = {\n          mX1: mX1,\n          mY1: mY1,\n          mX2: mX2,\n          mY2: mY2,\n          calcBezier: calcBezier,\n          getTForX: getTForX\n        };\n        _f.__initData = _worklet_11458292201024_init_data;\n        _f.__workletHash = 11458292201024;\n        _f.__stackDetails = _e;\n        return _f;\n      }();\n    };\n    _f._closure = {};\n    _f.__initData = _worklet_11048418097672_init_data;\n    _f.__workletHash = 11048418097672;\n    _f.__stackDetails = _e;\n    return _f;\n  }();\n  exports.Bezier = Bezier;\n});","lineCount":276,"map":[[61,6,9,16,"Bezier"],[61,12,9,22],[62,4,9,22],[63,4,9,22],[63,25,10,2,"mX1"],[63,28,10,13],[63,30,11,2,"mY1"],[63,33,11,13],[63,35,12,2,"mX2"],[63,38,12,13],[63,40,13,2,"mY2"],[63,43,13,13],[63,45,14,25],[64,6,17,2],[64,10,17,8,"NEWTON_ITERATIONS"],[64,27,17,25],[64,30,17,28],[64,31,17,29],[65,6,18,2],[65,10,18,8,"NEWTON_MIN_SLOPE"],[65,26,18,24],[65,29,18,27],[65,34,18,32],[66,6,19,2],[66,10,19,8,"SUBDIVISION_PRECISION"],[66,31,19,29],[66,34,19,32],[66,43,19,41],[67,6,20,2],[67,10,20,8,"SUBDIVISION_MAX_ITERATIONS"],[67,36,20,34],[67,39,20,37],[67,41,20,39],[68,6,22,2],[68,10,22,8,"kSplineTableSize"],[68,26,22,24],[68,29,22,27],[68,31,22,29],[69,6,23,2],[69,10,23,8,"kSampleStepSize"],[69,25,23,23],[69,28,23,26],[69,31,23,29],[69,35,23,33,"kSplineTableSize"],[69,51,23,49],[69,54,23,52],[69,57,23,55],[69,58,23,56],[70,6,23,57],[70,10,25,11,"A"],[70,11,25,12],[71,8,25,12],[72,8,25,12],[72,29,25,13,"aA1"],[72,32,25,24],[72,34,25,26,"aA2"],[72,37,25,37],[72,39,25,47],[73,10,27,4],[73,17,27,11],[73,20,27,14],[73,23,27,17],[73,26,27,20],[73,29,27,23,"aA2"],[73,32,27,26],[73,35,27,29],[73,38,27,32],[73,41,27,35,"aA1"],[73,44,27,38],[74,8,28,2],[74,9,28,3],[75,8,28,3],[76,8,28,3],[77,8,28,3],[78,8,28,3],[79,8,28,3],[80,6,28,3],[81,6,28,3],[81,10,29,11,"B"],[81,11,29,12],[82,8,29,12],[83,8,29,12],[83,29,29,13,"aA1"],[83,32,29,24],[83,34,29,26,"aA2"],[83,37,29,37],[83,39,29,47],[84,10,31,4],[84,17,31,11],[84,20,31,14],[84,23,31,17,"aA2"],[84,26,31,20],[84,29,31,23],[84,32,31,26],[84,35,31,29,"aA1"],[84,38,31,32],[85,8,32,2],[85,9,32,3],[86,8,32,3],[87,8,32,3],[88,8,32,3],[89,8,32,3],[90,8,32,3],[91,6,32,3],[92,6,32,3],[92,10,33,11,"C"],[92,11,33,12],[93,8,33,12],[94,8,33,12],[94,29,33,13,"aA1"],[94,32,33,24],[94,34,33,26],[95,10,35,4],[95,17,35,11],[95,20,35,14],[95,23,35,17,"aA1"],[95,26,35,20],[96,8,36,2],[96,9,36,3],[97,8,36,3],[98,8,36,3],[99,8,36,3],[100,8,36,3],[101,8,36,3],[102,6,36,3],[103,6,36,3],[103,10,39,11,"calcBezier"],[103,20,39,21],[104,8,39,21],[105,8,39,21],[105,29,39,22,"aT"],[105,31,39,32],[105,33,39,34,"aA1"],[105,36,39,45],[105,38,39,47,"aA2"],[105,41,39,58],[105,43,39,68],[106,10,41,4],[106,17,41,11],[106,18,41,12],[106,19,41,13,"A"],[106,20,41,14],[106,21,41,15,"aA1"],[106,24,41,18],[106,26,41,20,"aA2"],[106,29,41,23],[106,30,41,24],[106,33,41,27,"aT"],[106,35,41,29],[106,38,41,32,"B"],[106,39,41,33],[106,40,41,34,"aA1"],[106,43,41,37],[106,45,41,39,"aA2"],[106,48,41,42],[106,49,41,43],[106,53,41,47,"aT"],[106,55,41,49],[106,58,41,52,"C"],[106,59,41,53],[106,60,41,54,"aA1"],[106,63,41,57],[106,64,41,58],[106,68,41,62,"aT"],[106,70,41,64],[107,8,42,2],[107,9,42,3],[108,8,42,3],[109,10,42,3],[109,13,3,11,"A"],[109,14,3,12],[110,10,3,12],[110,13,3,30,"B"],[110,14,3,31],[111,10,3,31],[111,13,3,50,"C"],[112,8,3,51],[113,8,3,51],[114,8,3,51],[115,8,3,51],[116,8,3,51],[117,6,3,51],[118,6,3,51],[118,10,45,11,"getSlope"],[118,18,45,19],[119,8,45,19],[120,8,45,19],[120,29,45,20,"aT"],[120,31,45,30],[120,33,45,32,"aA1"],[120,36,45,43],[120,38,45,45,"aA2"],[120,41,45,56],[120,43,45,66],[121,10,47,4],[121,17,47,11],[121,20,47,14],[121,23,47,17,"A"],[121,24,47,18],[121,25,47,19,"aA1"],[121,28,47,22],[121,30,47,24,"aA2"],[121,33,47,27],[121,34,47,28],[121,37,47,31,"aT"],[121,39,47,33],[121,42,47,36,"aT"],[121,44,47,38],[121,47,47,41],[121,50,47,44],[121,53,47,47,"B"],[121,54,47,48],[121,55,47,49,"aA1"],[121,58,47,52],[121,60,47,54,"aA2"],[121,63,47,57],[121,64,47,58],[121,67,47,61,"aT"],[121,69,47,63],[121,72,47,66,"C"],[121,73,47,67],[121,74,47,68,"aA1"],[121,77,47,71],[121,78,47,72],[122,8,48,2],[122,9,48,3],[123,8,48,3],[124,10,48,3],[124,13,3,15,"A"],[124,14,3,16],[125,10,3,16],[125,13,3,45,"B"],[125,14,3,46],[126,10,3,46],[126,13,3,64,"C"],[127,8,3,65],[128,8,3,65],[129,8,3,65],[130,8,3,65],[131,8,3,65],[132,6,3,65],[133,6,3,65],[133,10,50,11,"binarySubdivide"],[133,25,50,26],[134,8,50,26],[135,8,50,26],[135,29,51,4,"aX"],[135,31,51,14],[135,33,52,4,"aA"],[135,35,52,14],[135,37,53,4,"aB"],[135,39,53,14],[135,41,54,4,"mX1"],[135,44,54,15],[135,46,55,4,"mX2"],[135,49,55,15],[135,51,56,12],[136,10,58,4],[136,14,58,8,"currentX"],[136,22,58,16],[137,10,59,4],[137,14,59,8,"currentT"],[137,22,59,16],[138,10,60,4],[138,14,60,8,"i"],[138,15,60,9],[138,18,60,12],[138,19,60,13],[139,10,61,4],[139,13,61,7],[140,12,62,6,"currentT"],[140,20,62,14],[140,23,62,17,"aA"],[140,25,62,19],[140,28,62,22],[140,29,62,23,"aB"],[140,31,62,25],[140,34,62,28,"aA"],[140,36,62,30],[140,40,62,34],[140,43,62,37],[141,12,63,6,"currentX"],[141,20,63,14],[141,23,63,17,"calcBezier"],[141,33,63,27],[141,34,63,28,"currentT"],[141,42,63,36],[141,44,63,38,"mX1"],[141,47,63,41],[141,49,63,43,"mX2"],[141,52,63,46],[141,53,63,47],[141,56,63,50,"aX"],[141,58,63,52],[142,12,64,6],[142,16,64,10,"currentX"],[142,24,64,18],[142,27,64,21],[142,30,64,24],[142,32,64,26],[143,14,65,8,"aB"],[143,16,65,10],[143,19,65,13,"currentT"],[143,27,65,21],[144,12,66,6],[144,13,66,7],[144,19,66,13],[145,14,67,8,"aA"],[145,16,67,10],[145,19,67,13,"currentT"],[145,27,67,21],[146,12,68,6],[147,10,69,4],[147,11,69,5],[147,19,70,6,"Math"],[147,23,70,10],[147,24,70,11,"abs"],[147,27,70,14],[147,28,70,15,"currentX"],[147,36,70,23],[147,37,70,24],[147,40,70,27,"SUBDIVISION_PRECISION"],[147,61,70,48],[147,65,71,6],[147,67,71,8,"i"],[147,68,71,9],[147,71,71,12,"SUBDIVISION_MAX_ITERATIONS"],[147,97,71,38],[148,10,73,4],[148,17,73,11,"currentT"],[148,25,73,19],[149,8,74,2],[149,9,74,3],[150,8,74,3],[151,10,74,3],[151,33,13,32,"SUBDIVISION_PRECISION"],[151,54,13,53],[152,10,13,53],[152,38,13,63,"SUBDIVISION_MAX_ITERATIONS"],[152,64,13,89],[153,10,13,89],[153,22,7,15,"calcBezier"],[154,8,7,25],[155,8,7,25],[156,8,7,25],[157,8,7,25],[158,8,7,25],[159,6,7,25],[160,6,7,25],[160,10,76,11,"newtonRaphsonIterate"],[160,30,76,31],[161,8,76,31],[162,8,76,31],[162,29,77,4,"aX"],[162,31,77,14],[162,33,78,4,"aGuessT"],[162,40,78,19],[162,42,79,4,"mX1"],[162,45,79,15],[162,47,80,4,"mX2"],[162,50,80,15],[162,52,81,12],[163,10,83,4],[163,15,83,9],[163,19,83,13,"i"],[163,20,83,14],[163,23,83,17],[163,24,83,18],[163,26,83,20,"i"],[163,27,83,21],[163,30,83,24,"NEWTON_ITERATIONS"],[163,47,83,41],[163,49,83,43],[163,51,83,45,"i"],[163,52,83,46],[163,54,83,48],[164,12,84,6],[164,16,84,12,"currentSlope"],[164,28,84,24],[164,31,84,27,"getSlope"],[164,39,84,35],[164,40,84,36,"aGuessT"],[164,47,84,43],[164,49,84,45,"mX1"],[164,52,84,48],[164,54,84,50,"mX2"],[164,57,84,53],[164,58,84,54],[165,12,85,6],[165,16,85,10,"currentSlope"],[165,28,85,22],[165,33,85,27],[165,36,85,30],[165,38,85,32],[166,14,86,8],[166,21,86,15,"aGuessT"],[166,28,86,22],[167,12,87,6],[168,12,88,6],[168,16,88,12,"currentX"],[168,24,88,20],[168,27,88,23,"calcBezier"],[168,37,88,33],[168,38,88,34,"aGuessT"],[168,45,88,41],[168,47,88,43,"mX1"],[168,50,88,46],[168,52,88,48,"mX2"],[168,55,88,51],[168,56,88,52],[168,59,88,55,"aX"],[168,61,88,57],[169,12,89,6,"aGuessT"],[169,19,89,13],[169,23,89,17,"currentX"],[169,31,89,25],[169,34,89,28,"currentSlope"],[169,46,89,40],[170,10,90,4],[171,10,91,4],[171,17,91,11,"aGuessT"],[171,24,91,18],[172,8,92,2],[172,9,92,3],[173,8,92,3],[174,10,92,3],[174,29,2,22,"NEWTON_ITERATIONS"],[174,46,2,39],[175,10,2,39],[175,20,3,25,"getSlope"],[175,28,3,33],[176,10,3,33],[176,22,7,21,"calcBezier"],[177,8,7,31],[178,8,7,31],[179,8,7,31],[180,8,7,31],[181,8,7,31],[182,6,7,31],[183,6,7,31],[183,10,94,11,"LinearEasing"],[183,22,94,23],[184,8,94,23],[185,8,94,23],[185,29,94,24,"x"],[185,30,94,33],[185,32,94,43],[186,10,96,4],[186,17,96,11,"x"],[186,18,96,12],[187,8,97,2],[187,9,97,3],[188,8,97,3],[189,8,97,3],[190,8,97,3],[191,8,97,3],[192,8,97,3],[193,6,97,3],[194,6,99,2],[194,10,99,6],[194,12,99,8,"mX1"],[194,15,99,11],[194,19,99,15],[194,20,99,16],[194,24,99,20,"mX1"],[194,27,99,23],[194,31,99,27],[194,32,99,28],[194,36,99,32,"mX2"],[194,39,99,35],[194,43,99,39],[194,44,99,40],[194,48,99,44,"mX2"],[194,51,99,47],[194,55,99,51],[194,56,99,52],[194,57,99,53],[194,59,99,55],[195,8,100,4],[195,14,100,10],[195,18,100,14,"Error"],[195,23,100,19],[195,24,100,20],[195,65,100,61],[195,66,100,62],[196,6,101,2],[197,6,103,2],[197,10,103,6,"mX1"],[197,13,103,9],[197,18,103,14,"mY1"],[197,21,103,17],[197,25,103,21,"mX2"],[197,28,103,24],[197,33,103,29,"mY2"],[197,36,103,32],[197,38,103,34],[198,8,104,4],[198,15,104,11,"LinearEasing"],[198,27,104,23],[199,6,105,2],[200,6,115,2],[200,10,115,8,"sampleValues"],[200,22,115,20],[200,25,115,23],[200,29,115,27,"Array"],[200,34,115,32],[200,35,115,33,"kSplineTableSize"],[200,51,115,49],[200,52,115,50],[201,6,117,2],[201,11,117,7],[201,15,117,11,"i"],[201,16,117,12],[201,19,117,15],[201,20,117,16],[201,22,117,18,"i"],[201,23,117,19],[201,26,117,22,"kSplineTableSize"],[201,42,117,38],[201,44,117,40],[201,46,117,42,"i"],[201,47,117,43],[201,49,117,45],[202,8,118,4,"sampleValues"],[202,20,118,16],[202,21,118,17,"i"],[202,22,118,18],[202,23,118,19],[202,26,118,22,"calcBezier"],[202,36,118,32],[202,37,118,33,"i"],[202,38,118,34],[202,41,118,37,"kSampleStepSize"],[202,56,118,52],[202,58,118,54,"mX1"],[202,61,118,57],[202,63,118,59,"mX2"],[202,66,118,62],[202,67,118,63],[203,6,119,2],[204,6,119,3],[204,10,121,11,"getTForX"],[204,18,121,19],[205,8,121,19],[206,8,121,19],[206,29,121,20,"aX"],[206,31,121,30],[206,33,121,40],[207,10,123,4],[207,14,123,8,"intervalStart"],[207,27,123,21],[207,30,123,24],[207,33,123,27],[208,10,124,4],[208,14,124,8,"currentSample"],[208,27,124,21],[208,30,124,24],[208,31,124,25],[209,10,125,4],[209,14,125,10,"lastSample"],[209,24,125,20],[209,27,125,23,"kSplineTableSize"],[209,43,125,39],[209,46,125,42],[209,47,125,43],[210,10,127,4],[210,17,129,6,"currentSample"],[210,30,129,19],[210,35,129,24,"lastSample"],[210,45,129,34],[210,49,129,38,"sampleValues"],[210,61,129,50],[210,62,129,51,"currentSample"],[210,75,129,64],[210,76,129,65],[210,80,129,69,"aX"],[210,82,129,71],[210,84,130,6],[210,86,130,8,"currentSample"],[210,99,130,21],[210,101,131,6],[211,12,132,6,"intervalStart"],[211,25,132,19],[211,29,132,23,"kSampleStepSize"],[211,44,132,38],[212,10,133,4],[213,10,134,4],[213,12,134,6,"currentSample"],[213,25,134,19],[214,10,137,4],[214,14,137,10,"dist"],[214,18,137,14],[214,21,138,6],[214,22,138,7,"aX"],[214,24,138,9],[214,27,138,12,"sampleValues"],[214,39,138,24],[214,40,138,25,"currentSample"],[214,53,138,38],[214,54,138,39],[214,59,139,7,"sampleValues"],[214,71,139,19],[214,72,139,20,"currentSample"],[214,85,139,33],[214,88,139,36],[214,89,139,37],[214,90,139,38],[214,93,139,41,"sampleValues"],[214,105,139,53],[214,106,139,54,"currentSample"],[214,119,139,67],[214,120,139,68],[214,121,139,69],[215,10,140,4],[215,14,140,10,"guessForT"],[215,23,140,19],[215,26,140,22,"intervalStart"],[215,39,140,35],[215,42,140,38,"dist"],[215,46,140,42],[215,49,140,45,"kSampleStepSize"],[215,64,140,60],[216,10,142,4],[216,14,142,10,"initialSlope"],[216,26,142,22],[216,29,142,25,"getSlope"],[216,37,142,33],[216,38,142,34,"guessForT"],[216,47,142,43],[216,49,142,45,"mX1"],[216,52,142,48],[216,54,142,50,"mX2"],[216,57,142,53],[216,58,142,54],[217,10,143,4],[217,14,143,8,"initialSlope"],[217,26,143,20],[217,30,143,24,"NEWTON_MIN_SLOPE"],[217,46,143,40],[217,48,143,42],[218,12,144,6],[218,19,144,13,"newtonRaphsonIterate"],[218,39,144,33],[218,40,144,34,"aX"],[218,42,144,36],[218,44,144,38,"guessForT"],[218,53,144,47],[218,55,144,49,"mX1"],[218,58,144,52],[218,60,144,54,"mX2"],[218,63,144,57],[218,64,144,58],[219,10,145,4],[219,11,145,5],[219,17,145,11],[219,21,145,15,"initialSlope"],[219,33,145,27],[219,38,145,32],[219,41,145,35],[219,43,145,37],[220,12,146,6],[220,19,146,13,"guessForT"],[220,28,146,22],[221,10,147,4],[221,11,147,5],[221,17,147,11],[222,12,148,6],[222,19,148,13,"binarySubdivide"],[222,34,148,28],[222,35,149,8,"aX"],[222,37,149,10],[222,39,150,8,"intervalStart"],[222,52,150,21],[222,54,151,8,"intervalStart"],[222,67,151,21],[222,70,151,24,"kSampleStepSize"],[222,85,151,39],[222,87,152,8,"mX1"],[222,90,152,11],[222,92,153,8,"mX2"],[222,95,153,11],[222,96,154,7],[223,10,155,4],[224,8,156,2],[224,9,156,3],[225,8,156,3],[226,10,156,3],[226,28,4,21,"kSplineTableSize"],[226,44,4,37],[227,10,4,37],[227,24,11,87,"sampleValues"],[227,36,11,99],[228,10,11,99],[228,27,19,62,"kSampleStepSize"],[228,42,19,77],[229,10,19,77],[229,20,13,23,"getSlope"],[229,28,13,31],[230,10,13,31],[230,15,19,79,"mX1"],[230,18,19,82],[231,10,19,82],[231,15,19,84,"mX2"],[231,18,19,87],[232,10,19,87],[232,28,14,22,"NEWTON_MIN_SLOPE"],[232,44,14,38],[233,10,14,38],[233,32,15,11,"newtonRaphsonIterate"],[233,52,15,31],[234,10,15,31],[234,27,19,11,"binarySubdivide"],[235,8,19,26],[236,8,19,26],[237,8,19,26],[238,8,19,26],[239,8,19,26],[240,6,19,26],[241,6,158,2],[242,8,158,2],[243,8,158,2],[243,29,158,31,"x"],[243,30,158,32],[243,32,158,34],[244,10,160,4],[244,14,160,8,"mX1"],[244,17,160,11],[244,22,160,16,"mY1"],[244,25,160,19],[244,29,160,23,"mX2"],[244,32,160,26],[244,37,160,31,"mY2"],[244,40,160,34],[244,42,160,36],[245,12,161,6],[245,19,161,13,"x"],[245,20,161,14],[246,10,162,4],[247,10,164,4],[247,14,164,8,"x"],[247,15,164,9],[247,20,164,14],[247,21,164,15],[247,23,164,17],[248,12,165,6],[248,19,165,13],[248,20,165,14],[249,10,166,4],[250,10,167,4],[250,14,167,8,"x"],[250,15,167,9],[250,20,167,14],[250,21,167,15],[250,23,167,17],[251,12,168,6],[251,19,168,13],[251,20,168,14],[252,10,169,4],[253,10,170,4],[253,17,170,11,"calcBezier"],[253,27,170,21],[253,28,170,22,"getTForX"],[253,36,170,30],[253,37,170,31,"x"],[253,38,170,32],[253,39,170,33],[253,41,170,35,"mY1"],[253,44,170,38],[253,46,170,40,"mY2"],[253,49,170,43],[253,50,170,44],[254,8,171,2],[254,9,171,3],[255,8,171,3],[256,10,171,3],[256,15,2,6,"mX1"],[256,18,2,9],[257,10,2,9],[257,15,12,33,"mY1"],[257,18,12,36],[258,10,12,36],[258,15,2,21,"mX2"],[258,18,2,24],[259,10,2,24],[259,15,12,38,"mY2"],[259,18,12,41],[260,10,12,41],[260,22,12,9,"calcBezier"],[260,32,12,19],[261,10,12,19],[261,20,12,20,"getTForX"],[262,8,12,28],[263,8,12,28],[264,8,12,28],[265,8,12,28],[266,8,12,28],[267,6,12,28],[268,4,172,0],[268,5,172,1],[269,4,172,1],[270,4,172,1],[271,4,172,1],[272,4,172,1],[273,4,172,1],[274,2,172,1],[275,2,172,1],[276,0,172,1]],"functionMap":{"names":["<global>","Bezier","A","B","C","calcBezier","getSlope","binarySubdivide","newtonRaphsonIterate","LinearEasing","getTForX","BezierEasing"],"mappings":"AAA;OCQ;ECgB;GDG;EEC;GFG;EGC;GHG;EIG;GJG;EKG;GLG;EME;GNwB;EOE;GPgB;EQE;GRG;ESwB;GTmC;SUE;GVa;CDC"}},"type":"js/module"}]}