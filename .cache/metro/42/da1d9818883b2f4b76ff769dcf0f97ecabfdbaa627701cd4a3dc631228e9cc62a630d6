{"dependencies":[],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = bezier;\n  var NEWTON_ITERATIONS = 4;\n  var NEWTON_MIN_SLOPE = 0.001;\n  var SUBDIVISION_PRECISION = 0.0000001;\n  var SUBDIVISION_MAX_ITERATIONS = 10;\n  var kSplineTableSize = 11;\n  var kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);\n  var float32ArraySupported = typeof Float32Array === 'function';\n  function A(aA1, aA2) {\n    return 1.0 - 3.0 * aA2 + 3.0 * aA1;\n  }\n  function B(aA1, aA2) {\n    return 3.0 * aA2 - 6.0 * aA1;\n  }\n  function C(aA1) {\n    return 3.0 * aA1;\n  }\n  function calcBezier(aT, aA1, aA2) {\n    return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;\n  }\n  function getSlope(aT, aA1, aA2) {\n    return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);\n  }\n  function binarySubdivide(aX, _aA, _aB, mX1, mX2) {\n    var currentX,\n      currentT,\n      i = 0,\n      aA = _aA,\n      aB = _aB;\n    do {\n      currentT = aA + (aB - aA) / 2.0;\n      currentX = calcBezier(currentT, mX1, mX2) - aX;\n      if (currentX > 0.0) {\n        aB = currentT;\n      } else {\n        aA = currentT;\n      }\n    } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);\n    return currentT;\n  }\n  function newtonRaphsonIterate(aX, _aGuessT, mX1, mX2) {\n    var aGuessT = _aGuessT;\n    for (var i = 0; i < NEWTON_ITERATIONS; ++i) {\n      var currentSlope = getSlope(aGuessT, mX1, mX2);\n      if (currentSlope === 0.0) {\n        return aGuessT;\n      }\n      var currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n      aGuessT -= currentX / currentSlope;\n    }\n    return aGuessT;\n  }\n  function bezier(mX1, mY1, mX2, mY2) {\n    if (!(mX1 >= 0 && mX1 <= 1 && mX2 >= 0 && mX2 <= 1)) {\n      throw new Error('bezier x values must be in [0, 1] range');\n    }\n    var sampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);\n    if (mX1 !== mY1 || mX2 !== mY2) {\n      for (var i = 0; i < kSplineTableSize; ++i) {\n        sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);\n      }\n    }\n    function getTForX(aX) {\n      var intervalStart = 0.0;\n      var currentSample = 1;\n      var lastSample = kSplineTableSize - 1;\n      for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {\n        intervalStart += kSampleStepSize;\n      }\n      --currentSample;\n      var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);\n      var guessForT = intervalStart + dist * kSampleStepSize;\n      var initialSlope = getSlope(guessForT, mX1, mX2);\n      if (initialSlope >= NEWTON_MIN_SLOPE) {\n        return newtonRaphsonIterate(aX, guessForT, mX1, mX2);\n      } else if (initialSlope === 0.0) {\n        return guessForT;\n      } else {\n        return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);\n      }\n    }\n    return function BezierEasing(x) {\n      if (mX1 === mY1 && mX2 === mY2) {\n        return x;\n      }\n      if (x === 0) {\n        return 0;\n      }\n      if (x === 1) {\n        return 1;\n      }\n      return calcBezier(getTForX(x), mY1, mY2);\n    };\n  }\n});","lineCount":100,"map":[[2,2,17,0],[2,14,17,12],[3,2,17,13],[4,4,17,13],[5,2,17,13],[6,2,17,13],[7,2,20,0],[7,6,20,6,"NEWTON_ITERATIONS"],[7,23,20,23],[7,26,20,26],[7,27,20,27],[8,2,21,0],[8,6,21,6,"NEWTON_MIN_SLOPE"],[8,22,21,22],[8,25,21,25],[8,30,21,30],[9,2,22,0],[9,6,22,6,"SUBDIVISION_PRECISION"],[9,27,22,27],[9,30,22,30],[9,39,22,39],[10,2,23,0],[10,6,23,6,"SUBDIVISION_MAX_ITERATIONS"],[10,32,23,32],[10,35,23,35],[10,37,23,37],[11,2,25,0],[11,6,25,6,"kSplineTableSize"],[11,22,25,22],[11,25,25,25],[11,27,25,27],[12,2,26,0],[12,6,26,6,"kSampleStepSize"],[12,21,26,21],[12,24,26,24],[12,27,26,27],[12,31,26,31,"kSplineTableSize"],[12,47,26,47],[12,50,26,50],[12,53,26,53],[12,54,26,54],[13,2,28,0],[13,6,28,6,"float32ArraySupported"],[13,27,28,27],[13,30,28,30],[13,37,28,37,"Float32Array"],[13,49,28,49],[13,54,28,54],[13,64,28,64],[14,2,30,0],[14,11,30,9,"A"],[14,12,30,10],[14,13,30,11,"aA1"],[14,16,30,22],[14,18,30,24,"aA2"],[14,21,30,35],[14,23,30,37],[15,4,31,2],[15,11,31,9],[15,14,31,12],[15,17,31,15],[15,20,31,18],[15,23,31,21,"aA2"],[15,26,31,24],[15,29,31,27],[15,32,31,30],[15,35,31,33,"aA1"],[15,38,31,36],[16,2,32,0],[17,2,33,0],[17,11,33,9,"B"],[17,12,33,10],[17,13,33,11,"aA1"],[17,16,33,22],[17,18,33,24,"aA2"],[17,21,33,35],[17,23,33,37],[18,4,34,2],[18,11,34,9],[18,14,34,12],[18,17,34,15,"aA2"],[18,20,34,18],[18,23,34,21],[18,26,34,24],[18,29,34,27,"aA1"],[18,32,34,30],[19,2,35,0],[20,2,36,0],[20,11,36,9,"C"],[20,12,36,10],[20,13,36,11,"aA1"],[20,16,36,22],[20,18,36,24],[21,4,37,2],[21,11,37,9],[21,14,37,12],[21,17,37,15,"aA1"],[21,20,37,18],[22,2,38,0],[23,2,41,0],[23,11,41,9,"calcBezier"],[23,21,41,19],[23,22,41,20,"aT"],[23,24,41,30],[23,26,41,32,"aA1"],[23,29,41,43],[23,31,41,45,"aA2"],[23,34,41,56],[23,36,41,58],[24,4,42,2],[24,11,42,9],[24,12,42,10],[24,13,42,11,"A"],[24,14,42,12],[24,15,42,13,"aA1"],[24,18,42,16],[24,20,42,18,"aA2"],[24,23,42,21],[24,24,42,22],[24,27,42,25,"aT"],[24,29,42,27],[24,32,42,30,"B"],[24,33,42,31],[24,34,42,32,"aA1"],[24,37,42,35],[24,39,42,37,"aA2"],[24,42,42,40],[24,43,42,41],[24,47,42,45,"aT"],[24,49,42,47],[24,52,42,50,"C"],[24,53,42,51],[24,54,42,52,"aA1"],[24,57,42,55],[24,58,42,56],[24,62,42,60,"aT"],[24,64,42,62],[25,2,43,0],[26,2,46,0],[26,11,46,9,"getSlope"],[26,19,46,17],[26,20,46,18,"aT"],[26,22,46,28],[26,24,46,30,"aA1"],[26,27,46,41],[26,29,46,43,"aA2"],[26,32,46,54],[26,34,46,56],[27,4,47,2],[27,11,47,9],[27,14,47,12],[27,17,47,15,"A"],[27,18,47,16],[27,19,47,17,"aA1"],[27,22,47,20],[27,24,47,22,"aA2"],[27,27,47,25],[27,28,47,26],[27,31,47,29,"aT"],[27,33,47,31],[27,36,47,34,"aT"],[27,38,47,36],[27,41,47,39],[27,44,47,42],[27,47,47,45,"B"],[27,48,47,46],[27,49,47,47,"aA1"],[27,52,47,50],[27,54,47,52,"aA2"],[27,57,47,55],[27,58,47,56],[27,61,47,59,"aT"],[27,63,47,61],[27,66,47,64,"C"],[27,67,47,65],[27,68,47,66,"aA1"],[27,71,47,69],[27,72,47,70],[28,2,48,0],[29,2,50,0],[29,11,50,9,"binarySubdivide"],[29,26,50,24],[29,27,51,2,"aX"],[29,29,51,12],[29,31,52,2,"_aA"],[29,34,52,13],[29,36,53,2,"_aB"],[29,39,53,13],[29,41,54,2,"mX1"],[29,44,54,13],[29,46,55,2,"mX2"],[29,49,55,13],[29,51,56,2],[30,4,57,2],[30,8,57,6,"currentX"],[30,16,57,14],[31,6,58,4,"currentT"],[31,14,58,12],[32,6,59,4,"i"],[32,7,59,5],[32,10,59,8],[32,11,59,9],[33,6,60,4,"aA"],[33,8,60,6],[33,11,60,9,"_aA"],[33,14,60,12],[34,6,61,4,"aB"],[34,8,61,6],[34,11,61,9,"_aB"],[34,14,61,12],[35,4,62,2],[35,7,62,5],[36,6,63,4,"currentT"],[36,14,63,12],[36,17,63,15,"aA"],[36,19,63,17],[36,22,63,20],[36,23,63,21,"aB"],[36,25,63,23],[36,28,63,26,"aA"],[36,30,63,28],[36,34,63,32],[36,37,63,35],[37,6,64,4,"currentX"],[37,14,64,12],[37,17,64,15,"calcBezier"],[37,27,64,25],[37,28,64,26,"currentT"],[37,36,64,34],[37,38,64,36,"mX1"],[37,41,64,39],[37,43,64,41,"mX2"],[37,46,64,44],[37,47,64,45],[37,50,64,48,"aX"],[37,52,64,50],[38,6,65,4],[38,10,65,8,"currentX"],[38,18,65,16],[38,21,65,19],[38,24,65,22],[38,26,65,24],[39,8,66,6,"aB"],[39,10,66,8],[39,13,66,11,"currentT"],[39,21,66,19],[40,6,67,4],[40,7,67,5],[40,13,67,11],[41,8,68,6,"aA"],[41,10,68,8],[41,13,68,11,"currentT"],[41,21,68,19],[42,6,69,4],[43,4,70,2],[43,5,70,3],[43,13,71,4,"Math"],[43,17,71,8],[43,18,71,9,"abs"],[43,21,71,12],[43,22,71,13,"currentX"],[43,30,71,21],[43,31,71,22],[43,34,71,25,"SUBDIVISION_PRECISION"],[43,55,71,46],[43,59,72,4],[43,61,72,6,"i"],[43,62,72,7],[43,65,72,10,"SUBDIVISION_MAX_ITERATIONS"],[43,91,72,36],[44,4,74,2],[44,11,74,9,"currentT"],[44,19,74,17],[45,2,75,0],[46,2,77,0],[46,11,77,9,"newtonRaphsonIterate"],[46,31,77,29],[46,32,78,2,"aX"],[46,34,78,12],[46,36,79,2,"_aGuessT"],[46,44,79,18],[46,46,80,2,"mX1"],[46,49,80,13],[46,51,81,2,"mX2"],[46,54,81,13],[46,56,82,2],[47,4,83,2],[47,8,83,6,"aGuessT"],[47,15,83,13],[47,18,83,16,"_aGuessT"],[47,26,83,24],[48,4,84,2],[48,9,84,7],[48,13,84,11,"i"],[48,14,84,12],[48,17,84,15],[48,18,84,16],[48,20,84,18,"i"],[48,21,84,19],[48,24,84,22,"NEWTON_ITERATIONS"],[48,41,84,39],[48,43,84,41],[48,45,84,43,"i"],[48,46,84,44],[48,48,84,46],[49,6,85,4],[49,10,85,10,"currentSlope"],[49,22,85,22],[49,25,85,25,"getSlope"],[49,33,85,33],[49,34,85,34,"aGuessT"],[49,41,85,41],[49,43,85,43,"mX1"],[49,46,85,46],[49,48,85,48,"mX2"],[49,51,85,51],[49,52,85,52],[50,6,86,4],[50,10,86,8,"currentSlope"],[50,22,86,20],[50,27,86,25],[50,30,86,28],[50,32,86,30],[51,8,87,6],[51,15,87,13,"aGuessT"],[51,22,87,20],[52,6,88,4],[53,6,89,4],[53,10,89,10,"currentX"],[53,18,89,18],[53,21,89,21,"calcBezier"],[53,31,89,31],[53,32,89,32,"aGuessT"],[53,39,89,39],[53,41,89,41,"mX1"],[53,44,89,44],[53,46,89,46,"mX2"],[53,49,89,49],[53,50,89,50],[53,53,89,53,"aX"],[53,55,89,55],[54,6,90,4,"aGuessT"],[54,13,90,11],[54,17,90,15,"currentX"],[54,25,90,23],[54,28,90,26,"currentSlope"],[54,40,90,38],[55,4,91,2],[56,4,92,2],[56,11,92,9,"aGuessT"],[56,18,92,16],[57,2,93,0],[58,2,95,15],[58,11,95,24,"bezier"],[58,17,95,30],[58,18,96,2,"mX1"],[58,21,96,13],[58,23,97,2,"mY1"],[58,26,97,13],[58,28,98,2,"mX2"],[58,31,98,13],[58,33,99,2,"mY2"],[58,36,99,13],[58,38,100,25],[59,4,101,2],[59,8,101,6],[59,10,101,8,"mX1"],[59,13,101,11],[59,17,101,15],[59,18,101,16],[59,22,101,20,"mX1"],[59,25,101,23],[59,29,101,27],[59,30,101,28],[59,34,101,32,"mX2"],[59,37,101,35],[59,41,101,39],[59,42,101,40],[59,46,101,44,"mX2"],[59,49,101,47],[59,53,101,51],[59,54,101,52],[59,55,101,53],[59,57,101,55],[60,6,102,4],[60,12,102,10],[60,16,102,14,"Error"],[60,21,102,19],[60,22,102,20],[60,63,102,61],[60,64,102,62],[61,4,103,2],[62,4,106,2],[62,8,106,8,"sampleValues"],[62,20,106,20],[62,23,106,23,"float32ArraySupported"],[62,44,106,44],[62,47,107,6],[62,51,107,10,"Float32Array"],[62,63,107,22],[62,64,107,23,"kSplineTableSize"],[62,80,107,39],[62,81,107,40],[62,84,108,6],[62,88,108,10,"Array"],[62,93,108,15],[62,94,108,16,"kSplineTableSize"],[62,110,108,32],[62,111,108,33],[63,4,109,2],[63,8,109,6,"mX1"],[63,11,109,9],[63,16,109,14,"mY1"],[63,19,109,17],[63,23,109,21,"mX2"],[63,26,109,24],[63,31,109,29,"mY2"],[63,34,109,32],[63,36,109,34],[64,6,110,4],[64,11,110,9],[64,15,110,13,"i"],[64,16,110,14],[64,19,110,17],[64,20,110,18],[64,22,110,20,"i"],[64,23,110,21],[64,26,110,24,"kSplineTableSize"],[64,42,110,40],[64,44,110,42],[64,46,110,44,"i"],[64,47,110,45],[64,49,110,47],[65,8,111,6,"sampleValues"],[65,20,111,18],[65,21,111,19,"i"],[65,22,111,20],[65,23,111,21],[65,26,111,24,"calcBezier"],[65,36,111,34],[65,37,111,35,"i"],[65,38,111,36],[65,41,111,39,"kSampleStepSize"],[65,56,111,54],[65,58,111,56,"mX1"],[65,61,111,59],[65,63,111,61,"mX2"],[65,66,111,64],[65,67,111,65],[66,6,112,4],[67,4,113,2],[68,4,115,2],[68,13,115,11,"getTForX"],[68,21,115,19],[68,22,115,20,"aX"],[68,24,115,30],[68,26,115,32],[69,6,116,4],[69,10,116,8,"intervalStart"],[69,23,116,21],[69,26,116,24],[69,29,116,27],[70,6,117,4],[70,10,117,8,"currentSample"],[70,23,117,21],[70,26,117,24],[70,27,117,25],[71,6,118,4],[71,10,118,10,"lastSample"],[71,20,118,20],[71,23,118,23,"kSplineTableSize"],[71,39,118,39],[71,42,118,42],[71,43,118,43],[72,6,120,4],[72,13,122,6,"currentSample"],[72,26,122,19],[72,31,122,24,"lastSample"],[72,41,122,34],[72,45,122,38,"sampleValues"],[72,57,122,50],[72,58,122,51,"currentSample"],[72,71,122,64],[72,72,122,65],[72,76,122,69,"aX"],[72,78,122,71],[72,80,123,6],[72,82,123,8,"currentSample"],[72,95,123,21],[72,97,124,6],[73,8,125,6,"intervalStart"],[73,21,125,19],[73,25,125,23,"kSampleStepSize"],[73,40,125,38],[74,6,126,4],[75,6,127,4],[75,8,127,6,"currentSample"],[75,21,127,19],[76,6,130,4],[76,10,130,10,"dist"],[76,14,130,14],[76,17,131,6],[76,18,131,7,"aX"],[76,20,131,9],[76,23,131,12,"sampleValues"],[76,35,131,24],[76,36,131,25,"currentSample"],[76,49,131,38],[76,50,131,39],[76,55,132,7,"sampleValues"],[76,67,132,19],[76,68,132,20,"currentSample"],[76,81,132,33],[76,84,132,36],[76,85,132,37],[76,86,132,38],[76,89,132,41,"sampleValues"],[76,101,132,53],[76,102,132,54,"currentSample"],[76,115,132,67],[76,116,132,68],[76,117,132,69],[77,6,133,4],[77,10,133,10,"guessForT"],[77,19,133,19],[77,22,133,22,"intervalStart"],[77,35,133,35],[77,38,133,38,"dist"],[77,42,133,42],[77,45,133,45,"kSampleStepSize"],[77,60,133,60],[78,6,135,4],[78,10,135,10,"initialSlope"],[78,22,135,22],[78,25,135,25,"getSlope"],[78,33,135,33],[78,34,135,34,"guessForT"],[78,43,135,43],[78,45,135,45,"mX1"],[78,48,135,48],[78,50,135,50,"mX2"],[78,53,135,53],[78,54,135,54],[79,6,136,4],[79,10,136,8,"initialSlope"],[79,22,136,20],[79,26,136,24,"NEWTON_MIN_SLOPE"],[79,42,136,40],[79,44,136,42],[80,8,137,6],[80,15,137,13,"newtonRaphsonIterate"],[80,35,137,33],[80,36,137,34,"aX"],[80,38,137,36],[80,40,137,38,"guessForT"],[80,49,137,47],[80,51,137,49,"mX1"],[80,54,137,52],[80,56,137,54,"mX2"],[80,59,137,57],[80,60,137,58],[81,6,138,4],[81,7,138,5],[81,13,138,11],[81,17,138,15,"initialSlope"],[81,29,138,27],[81,34,138,32],[81,37,138,35],[81,39,138,37],[82,8,139,6],[82,15,139,13,"guessForT"],[82,24,139,22],[83,6,140,4],[83,7,140,5],[83,13,140,11],[84,8,141,6],[84,15,141,13,"binarySubdivide"],[84,30,141,28],[84,31,142,8,"aX"],[84,33,142,10],[84,35,143,8,"intervalStart"],[84,48,143,21],[84,50,144,8,"intervalStart"],[84,63,144,21],[84,66,144,24,"kSampleStepSize"],[84,81,144,39],[84,83,145,8,"mX1"],[84,86,145,11],[84,88,146,8,"mX2"],[84,91,146,11],[84,92,147,7],[85,6,148,4],[86,4,149,2],[87,4,151,2],[87,11,151,9],[87,20,151,18,"BezierEasing"],[87,32,151,30],[87,33,151,31,"x"],[87,34,151,40],[87,36,151,50],[88,6,152,4],[88,10,152,8,"mX1"],[88,13,152,11],[88,18,152,16,"mY1"],[88,21,152,19],[88,25,152,23,"mX2"],[88,28,152,26],[88,33,152,31,"mY2"],[88,36,152,34],[88,38,152,36],[89,8,153,6],[89,15,153,13,"x"],[89,16,153,14],[90,6,154,4],[91,6,156,4],[91,10,156,8,"x"],[91,11,156,9],[91,16,156,14],[91,17,156,15],[91,19,156,17],[92,8,157,6],[92,15,157,13],[92,16,157,14],[93,6,158,4],[94,6,159,4],[94,10,159,8,"x"],[94,11,159,9],[94,16,159,14],[94,17,159,15],[94,19,159,17],[95,8,160,6],[95,15,160,13],[95,16,160,14],[96,6,161,4],[97,6,162,4],[97,13,162,11,"calcBezier"],[97,23,162,21],[97,24,162,22,"getTForX"],[97,32,162,30],[97,33,162,31,"x"],[97,34,162,32],[97,35,162,33],[97,37,162,35,"mY1"],[97,40,162,38],[97,42,162,40,"mY2"],[97,45,162,43],[97,46,162,44],[98,4,163,2],[98,5,163,3],[99,2,164,0],[100,0,164,1]],"functionMap":{"names":["<global>","A","B","C","calcBezier","getSlope","binarySubdivide","newtonRaphsonIterate","bezier","getTForX","BezierEasing"],"mappings":"AAA;AC6B;CDE;AEC;CFE;AGC;CHE;AIG;CJE;AKG;CLE;AME;CNyB;AOE;CPgB;eQE;ECoB;GDkC;SEE;GFY;CRC"}},"type":"js/module"}]}