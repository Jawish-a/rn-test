{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":54,"index":54}}],"key":"7kvm5yrOpz4NYiDi6sn4qxa8DVQ="}},{"name":"escape-string-regexp","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":54,"index":54}}],"key":"pv3xsw91DuEhfWNv1C6M3srszHc="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = extractPathFromURL;\n  var _escapeStringRegexp = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\")(_$$_REQUIRE(_dependencyMap[1], \"escape-string-regexp\"));\n  function extractPathFromURL(prefixes, url) {\n    for (var prefix of prefixes) {\n      var _prefix$match$, _prefix$match;\n      var protocol = (_prefix$match$ = (_prefix$match = prefix.match(/^[^:]+:/)) == null ? void 0 : _prefix$match[0]) != null ? _prefix$match$ : '';\n      var host = prefix.replace(new RegExp(`^${(0, _escapeStringRegexp.default)(protocol)}`), '').replace(/\\/+/g, '/').replace(/^\\//, '');\n      var prefixRegex = new RegExp(`^${(0, _escapeStringRegexp.default)(protocol)}(/)*${host.split('.').map(function (it) {\n        return it === '*' ? '[^/]+' : (0, _escapeStringRegexp.default)(it);\n      }).join('\\\\.')}`);\n      var normalizedURL = url.replace(/\\/+/g, '/');\n      if (prefixRegex.test(normalizedURL)) {\n        return normalizedURL.replace(prefixRegex, '');\n      }\n    }\n    return undefined;\n  }\n});","lineCount":22,"map":[[6,2,1,0],[7,2,3,15],[7,11,3,24,"extractPathFromURL"],[7,29,3,42],[7,30,3,43,"prefixes"],[7,38,3,61],[7,40,3,63,"url"],[7,43,3,74],[7,45,3,76],[8,4,4,2],[8,9,4,7],[8,13,4,13,"prefix"],[8,19,4,19],[8,23,4,23,"prefixes"],[8,31,4,31],[8,33,4,33],[9,6,4,33],[10,6,5,4],[10,10,5,10,"protocol"],[10,18,5,18],[10,56,5,21,"prefix"],[10,62,5,27],[10,63,5,28,"match"],[10,68,5,33],[10,69,5,34],[10,78,5,43],[10,79,5,44],[10,100,5,21],[10,114,5,47],[10,115,5,48],[10,116,5,49],[10,145,5,53],[10,147,5,55],[11,6,6,4],[11,10,6,10,"host"],[11,14,6,14],[11,17,6,17,"prefix"],[11,23,6,23],[11,24,7,7,"replace"],[11,31,7,14],[11,32,7,15],[11,36,7,19,"RegExp"],[11,42,7,25],[11,43,7,27],[11,47,7,30],[11,51,7,30,"escapeStringRegexp"],[11,78,7,48],[11,80,7,49,"protocol"],[11,88,7,57],[11,89,7,59],[11,91,7,60],[11,92,7,61],[11,94,7,63],[11,96,7,65],[11,97,7,66],[11,98,8,7,"replace"],[11,105,8,14],[11,106,8,15],[11,112,8,21],[11,114,8,23],[11,117,8,26],[11,118,8,27],[11,119,9,7,"replace"],[11,126,9,14],[11,127,9,15],[11,132,9,20],[11,134,9,22],[11,136,9,24],[11,137,9,25],[12,6,11,4],[12,10,11,10,"prefixRegex"],[12,21,11,21],[12,24,11,24],[12,28,11,28,"RegExp"],[12,34,11,34],[12,35,12,7],[12,39,12,10],[12,43,12,10,"escapeStringRegexp"],[12,70,12,28],[12,72,12,29,"protocol"],[12,80,12,37],[12,81,12,39],[12,88,12,45,"host"],[12,92,12,49],[12,93,13,9,"split"],[12,98,13,14],[12,99,13,15],[12,102,13,18],[12,103,13,19],[12,104,14,9,"map"],[12,107,14,12],[12,108,14,13],[12,118,14,14,"it"],[12,120,14,16],[13,8,14,16],[13,15,14,22,"it"],[13,17,14,24],[13,22,14,29],[13,25,14,32],[13,28,14,35],[13,35,14,42],[13,38,14,45],[13,42,14,45,"escapeStringRegexp"],[13,69,14,63],[13,71,14,64,"it"],[13,73,14,66],[13,74,14,67],[14,6,14,67],[14,7,14,68],[14,8,14,69],[14,9,15,9,"join"],[14,13,15,13],[14,14,15,14],[14,19,15,19],[14,20,15,21],[14,22,15,22],[14,23,16,5],[15,6,18,4],[15,10,18,10,"normalizedURL"],[15,23,18,23],[15,26,18,26,"url"],[15,29,18,29],[15,30,18,30,"replace"],[15,37,18,37],[15,38,18,38],[15,44,18,44],[15,46,18,46],[15,49,18,49],[15,50,18,50],[16,6,20,4],[16,10,20,8,"prefixRegex"],[16,21,20,19],[16,22,20,20,"test"],[16,26,20,24],[16,27,20,25,"normalizedURL"],[16,40,20,38],[16,41,20,39],[16,43,20,41],[17,8,21,6],[17,15,21,13,"normalizedURL"],[17,28,21,26],[17,29,21,27,"replace"],[17,36,21,34],[17,37,21,35,"prefixRegex"],[17,48,21,46],[17,50,21,48],[17,52,21,50],[17,53,21,51],[18,6,22,4],[19,4,23,2],[20,4,25,2],[20,11,25,9,"undefined"],[20,20,25,18],[21,2,26,0],[22,0,26,1]],"functionMap":{"names":["<global>","extractPathFromURL","host.split.map$argument_0"],"mappings":"AAA;eCE;aCW,uDD;CDY"}},"type":"js/module"}]}