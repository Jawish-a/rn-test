{"dependencies":[{"name":"@babel/runtime/helpers/getPrototypeOf","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":169,"column":0,"index":5232}},{"start":{"line":1,"column":0,"index":0},"end":{"line":169,"column":0,"index":5232}}],"key":"4pxOr+e+5cSZAdeEKxSt3F7LoKY="}},{"name":"@babel/runtime/helpers/possibleConstructorReturn","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":169,"column":0,"index":5232}}],"key":"rcd0dMwf8BS2g+8U1wyhIOxtYEo="}},{"name":"@babel/runtime/helpers/inherits","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":169,"column":0,"index":5232}}],"key":"EDnOjopp9yNVawSzfBRsy2dq5dM="}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"locs":[{"start":{"line":11,"column":31,"index":355},"end":{"line":22,"column":3,"index":555}}],"key":"ohGilxjVqjyE1GooDVDt9OYg9x0="}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":169,"column":0,"index":5232}}],"key":"V6GYoXnblvuuGHJNMy7MHyaunsU="}},{"name":"./notifyManager.js","data":{"asyncType":null,"locs":[{"start":{"line":49,"column":4,"index":1049},"end":{"line":49,"column":31,"index":1076}},{"start":{"line":158,"column":4,"index":5003},"end":{"line":158,"column":31,"index":5030}}],"key":"dvxuN+qiE4/IwRL8dehUI3pSCR0="}},{"name":"./utils.js","data":{"asyncType":null,"locs":[{"start":{"line":71,"column":6,"index":2046},"end":{"line":71,"column":22,"index":2062}},{"start":{"line":74,"column":6,"index":2158},"end":{"line":74,"column":22,"index":2174}},{"start":{"line":152,"column":20,"index":4909},"end":{"line":152,"column":35,"index":4924}}],"key":"03VO7/E+L2S6CYQuFHTg8eKUrwk="}},{"name":"./queryObserver.js","data":{"asyncType":null,"locs":[{"start":{"line":121,"column":61,"index":3887},"end":{"line":121,"column":88,"index":3914}}],"key":"EL8DWEL35b/Ep7J57hx5oAGYuV4="}},{"name":"./subscribable.js","data":{"asyncType":null,"locs":[{"start":{"line":10,"column":30,"index":296},"end":{"line":10,"column":55,"index":321}}],"key":"avEzOCPLnxe7XbJG88h2bQqtyvQ="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/getPrototypeOf\")(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/getPrototypeOf\")(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/possibleConstructorReturn\")(this, result); }; }\n  function _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  var QueriesObserver = function (_subscribable$Subscri) {\n    _$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/inherits\")(QueriesObserver, _subscribable$Subscri);\n    var _super = _createSuper(QueriesObserver);\n    function QueriesObserver(client, queries) {\n      var _this;\n      _$$_REQUIRE(_dependencyMap[3], \"@babel/runtime/helpers/classCallCheck\")(this, QueriesObserver);\n      _this = _super.call(this);\n      _this.client = client;\n      _this.queries = [];\n      _this.result = [];\n      _this.observers = [];\n      _this.observersMap = {};\n      if (queries) {\n        _this.setQueries(queries);\n      }\n      return _this;\n    }\n    _$$_REQUIRE(_dependencyMap[4], \"@babel/runtime/helpers/createClass\")(QueriesObserver, [{\n      key: \"onSubscribe\",\n      value: function onSubscribe() {\n        var _this2 = this;\n        if (this.listeners.length === 1) {\n          this.observers.forEach(function (observer) {\n            observer.subscribe(function (result) {\n              _this2.onUpdate(observer, result);\n            });\n          });\n        }\n      }\n    }, {\n      key: \"onUnsubscribe\",\n      value: function onUnsubscribe() {\n        if (!this.listeners.length) {\n          this.destroy();\n        }\n      }\n    }, {\n      key: \"destroy\",\n      value: function destroy() {\n        this.listeners = [];\n        this.observers.forEach(function (observer) {\n          observer.destroy();\n        });\n      }\n    }, {\n      key: \"setQueries\",\n      value: function setQueries(queries, notifyOptions) {\n        var _this3 = this;\n        this.queries = queries;\n        _$$_REQUIRE(_dependencyMap[5], \"./notifyManager.js\").notifyManager.batch(function () {\n          var prevObservers = _this3.observers;\n          var newObserverMatches = _this3.findMatchingObservers(_this3.queries);\n          newObserverMatches.forEach(function (match) {\n            return match.observer.setOptions(match.defaultedQueryOptions, notifyOptions);\n          });\n          var newObservers = newObserverMatches.map(function (match) {\n            return match.observer;\n          });\n          var newObserversMap = Object.fromEntries(newObservers.map(function (observer) {\n            return [observer.options.queryHash, observer];\n          }));\n          var newResult = newObservers.map(function (observer) {\n            return observer.getCurrentResult();\n          });\n          var hasIndexChange = newObservers.some(function (observer, index) {\n            return observer !== prevObservers[index];\n          });\n          if (prevObservers.length === newObservers.length && !hasIndexChange) {\n            return;\n          }\n          _this3.observers = newObservers;\n          _this3.observersMap = newObserversMap;\n          _this3.result = newResult;\n          if (!_this3.hasListeners()) {\n            return;\n          }\n          _$$_REQUIRE(_dependencyMap[6], \"./utils.js\").difference(prevObservers, newObservers).forEach(function (observer) {\n            observer.destroy();\n          });\n          _$$_REQUIRE(_dependencyMap[6], \"./utils.js\").difference(newObservers, prevObservers).forEach(function (observer) {\n            observer.subscribe(function (result) {\n              _this3.onUpdate(observer, result);\n            });\n          });\n          _this3.notify();\n        });\n      }\n    }, {\n      key: \"getCurrentResult\",\n      value: function getCurrentResult() {\n        return this.result;\n      }\n    }, {\n      key: \"getQueries\",\n      value: function getQueries() {\n        return this.observers.map(function (observer) {\n          return observer.getCurrentQuery();\n        });\n      }\n    }, {\n      key: \"getObservers\",\n      value: function getObservers() {\n        return this.observers;\n      }\n    }, {\n      key: \"getOptimisticResult\",\n      value: function getOptimisticResult(queries) {\n        return this.findMatchingObservers(queries).map(function (match) {\n          return match.observer.getOptimisticResult(match.defaultedQueryOptions);\n        });\n      }\n    }, {\n      key: \"findMatchingObservers\",\n      value: function findMatchingObservers(queries) {\n        var _this4 = this;\n        var prevObservers = this.observers;\n        var defaultedQueryOptions = queries.map(function (options) {\n          return _this4.client.defaultQueryOptions(options);\n        });\n        var matchingObservers = defaultedQueryOptions.flatMap(function (defaultedOptions) {\n          var match = prevObservers.find(function (observer) {\n            return observer.options.queryHash === defaultedOptions.queryHash;\n          });\n          if (match != null) {\n            return [{\n              defaultedQueryOptions: defaultedOptions,\n              observer: match\n            }];\n          }\n          return [];\n        });\n        var matchedQueryHashes = matchingObservers.map(function (match) {\n          return match.defaultedQueryOptions.queryHash;\n        });\n        var unmatchedQueries = defaultedQueryOptions.filter(function (defaultedOptions) {\n          return !matchedQueryHashes.includes(defaultedOptions.queryHash);\n        });\n        var unmatchedObservers = prevObservers.filter(function (prevObserver) {\n          return !matchingObservers.some(function (match) {\n            return match.observer === prevObserver;\n          });\n        });\n        var getObserver = function getObserver(options) {\n          var defaultedOptions = _this4.client.defaultQueryOptions(options);\n          var currentObserver = _this4.observersMap[defaultedOptions.queryHash];\n          return currentObserver != null ? currentObserver : new (_$$_REQUIRE(_dependencyMap[7], \"./queryObserver.js\").QueryObserver)(_this4.client, defaultedOptions);\n        };\n        var newOrReusedObservers = unmatchedQueries.map(function (options, index) {\n          if (options.keepPreviousData) {\n            var previouslyUsedObserver = unmatchedObservers[index];\n            if (previouslyUsedObserver !== undefined) {\n              return {\n                defaultedQueryOptions: options,\n                observer: previouslyUsedObserver\n              };\n            }\n          }\n          return {\n            defaultedQueryOptions: options,\n            observer: getObserver(options)\n          };\n        });\n        var sortMatchesByOrderOfQueries = function sortMatchesByOrderOfQueries(a, b) {\n          return defaultedQueryOptions.indexOf(a.defaultedQueryOptions) - defaultedQueryOptions.indexOf(b.defaultedQueryOptions);\n        };\n        return matchingObservers.concat(newOrReusedObservers).sort(sortMatchesByOrderOfQueries);\n      }\n    }, {\n      key: \"onUpdate\",\n      value: function onUpdate(observer, result) {\n        var index = this.observers.indexOf(observer);\n        if (index !== -1) {\n          this.result = _$$_REQUIRE(_dependencyMap[6], \"./utils.js\").replaceAt(this.result, index, result);\n          this.notify();\n        }\n      }\n    }, {\n      key: \"notify\",\n      value: function notify() {\n        var _this5 = this;\n        _$$_REQUIRE(_dependencyMap[5], \"./notifyManager.js\").notifyManager.batch(function () {\n          _this5.listeners.forEach(function (listener) {\n            listener(_this5.result);\n          });\n        });\n      }\n    }]);\n    return QueriesObserver;\n  }(_$$_REQUIRE(_dependencyMap[8], \"./subscribable.js\").Subscribable);\n  exports.QueriesObserver = QueriesObserver;\n});","lineCount":199,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[5,2,1,13],[6,2,3,0,"Object"],[6,8,3,6],[6,9,3,7,"defineProperty"],[6,23,3,21],[6,24,3,22,"exports"],[6,31,3,29],[6,33,3,31],[6,45,3,43],[6,47,3,45],[7,4,3,47,"value"],[7,9,3,52],[7,11,3,54],[8,2,3,59],[8,3,3,60],[8,4,3,61],[9,2,3,62],[9,6,10,6,"QueriesObserver"],[9,21,10,21],[10,4,10,21],[11,4,10,21],[12,4,11,2],[12,29,11,14,"client"],[12,35,11,20],[12,37,11,22,"queries"],[12,44,11,29],[12,46,11,31],[13,6,11,31],[14,6,11,31],[15,6,12,4],[16,6,13,4],[16,12,13,9,"client"],[16,18,13,15],[16,21,13,18,"client"],[16,27,13,24],[17,6,14,4],[17,12,14,9,"queries"],[17,19,14,16],[17,22,14,19],[17,24,14,21],[18,6,15,4],[18,12,15,9,"result"],[18,18,15,15],[18,21,15,18],[18,23,15,20],[19,6,16,4],[19,12,16,9,"observers"],[19,21,16,18],[19,24,16,21],[19,26,16,23],[20,6,17,4],[20,12,17,9,"observersMap"],[20,24,17,21],[20,27,17,24],[20,28,17,25],[20,29,17,26],[21,6,19,4],[21,10,19,8,"queries"],[21,17,19,15],[21,19,19,17],[22,8,20,6],[22,14,20,11,"setQueries"],[22,24,20,21],[22,25,20,22,"queries"],[22,32,20,29],[22,33,20,30],[23,6,21,4],[24,6,21,5],[25,4,22,2],[26,4,22,3],[27,6,22,3],[28,6,22,3],[28,13,24,2],[28,36,24,16],[29,8,24,16],[30,8,25,4],[30,12,25,8],[30,16,25,12],[30,17,25,13,"listeners"],[30,26,25,22],[30,27,25,23,"length"],[30,33,25,29],[30,38,25,34],[30,39,25,35],[30,41,25,37],[31,10,26,6],[31,14,26,10],[31,15,26,11,"observers"],[31,24,26,20],[31,25,26,21,"forEach"],[31,32,26,28],[31,33,26,29],[31,43,26,29,"observer"],[31,51,26,37],[31,53,26,41],[32,12,27,8,"observer"],[32,20,27,16],[32,21,27,17,"subscribe"],[32,30,27,26],[32,31,27,27],[32,41,27,27,"result"],[32,47,27,33],[32,49,27,37],[33,14,28,10],[33,20,28,14],[33,21,28,15,"onUpdate"],[33,29,28,23],[33,30,28,24,"observer"],[33,38,28,32],[33,40,28,34,"result"],[33,46,28,40],[33,47,28,41],[34,12,29,8],[34,13,29,9],[34,14,29,10],[35,10,30,6],[35,11,30,7],[35,12,30,8],[36,8,31,4],[37,6,32,2],[38,4,32,3],[39,6,32,3],[40,6,32,3],[40,13,34,2],[40,38,34,18],[41,8,35,4],[41,12,35,8],[41,13,35,9],[41,17,35,13],[41,18,35,14,"listeners"],[41,27,35,23],[41,28,35,24,"length"],[41,34,35,30],[41,36,35,32],[42,10,36,6],[42,14,36,10],[42,15,36,11,"destroy"],[42,22,36,18],[42,24,36,20],[43,8,37,4],[44,6,38,2],[45,4,38,3],[46,6,38,3],[47,6,38,3],[47,13,40,2],[47,32,40,12],[48,8,41,4],[48,12,41,8],[48,13,41,9,"listeners"],[48,22,41,18],[48,25,41,21],[48,27,41,23],[49,8,42,4],[49,12,42,8],[49,13,42,9,"observers"],[49,22,42,18],[49,23,42,19,"forEach"],[49,30,42,26],[49,31,42,27],[49,41,42,27,"observer"],[49,49,42,35],[49,51,42,39],[50,10,43,6,"observer"],[50,18,43,14],[50,19,43,15,"destroy"],[50,26,43,22],[50,28,43,24],[51,8,44,4],[51,9,44,5],[51,10,44,6],[52,6,45,2],[53,4,45,3],[54,6,45,3],[55,6,45,3],[55,13,47,2],[55,33,47,13,"queries"],[55,40,47,20],[55,42,47,22,"notifyOptions"],[55,55,47,35],[55,57,47,37],[56,8,47,37],[57,8,48,4],[57,12,48,8],[57,13,48,9,"queries"],[57,20,48,16],[57,23,48,19,"queries"],[57,30,48,26],[58,8,49,4],[58,61,49,18,"notifyManager"],[58,74,49,31],[58,75,49,32,"batch"],[58,80,49,37],[58,81,49,38],[58,93,49,44],[59,10,50,6],[59,14,50,12,"prevObservers"],[59,27,50,25],[59,30,50,28],[59,36,50,32],[59,37,50,33,"observers"],[59,46,50,42],[60,10,51,6],[60,14,51,12,"newObserverMatches"],[60,32,51,30],[60,35,51,33],[60,41,51,37],[60,42,51,38,"findMatchingObservers"],[60,63,51,59],[60,64,51,60],[60,70,51,64],[60,71,51,65,"queries"],[60,78,51,72],[60,79,51,73],[61,10,53,6,"newObserverMatches"],[61,28,53,24],[61,29,53,25,"forEach"],[61,36,53,32],[61,37,53,33],[61,47,53,33,"match"],[61,52,53,38],[62,12,53,38],[62,19,53,42,"match"],[62,24,53,47],[62,25,53,48,"observer"],[62,33,53,56],[62,34,53,57,"setOptions"],[62,44,53,67],[62,45,53,68,"match"],[62,50,53,73],[62,51,53,74,"defaultedQueryOptions"],[62,72,53,95],[62,74,53,97,"notifyOptions"],[62,87,53,110],[62,88,53,111],[63,10,53,111],[63,12,53,112],[64,10,54,6],[64,14,54,12,"newObservers"],[64,26,54,24],[64,29,54,27,"newObserverMatches"],[64,47,54,45],[64,48,54,46,"map"],[64,51,54,49],[64,52,54,50],[64,62,54,50,"match"],[64,67,54,55],[65,12,54,55],[65,19,54,59,"match"],[65,24,54,64],[65,25,54,65,"observer"],[65,33,54,73],[66,10,54,73],[66,12,54,74],[67,10,55,6],[67,14,55,12,"newObserversMap"],[67,29,55,27],[67,32,55,30,"Object"],[67,38,55,36],[67,39,55,37,"fromEntries"],[67,50,55,48],[67,51,55,49,"newObservers"],[67,63,55,61],[67,64,55,62,"map"],[67,67,55,65],[67,68,55,66],[67,78,55,66,"observer"],[67,86,55,74],[68,12,55,74],[68,19,55,78],[68,20,55,79,"observer"],[68,28,55,87],[68,29,55,88,"options"],[68,36,55,95],[68,37,55,96,"queryHash"],[68,46,55,105],[68,48,55,107,"observer"],[68,56,55,115],[68,57,55,116],[69,10,55,116],[69,12,55,117],[69,13,55,118],[70,10,56,6],[70,14,56,12,"newResult"],[70,23,56,21],[70,26,56,24,"newObservers"],[70,38,56,36],[70,39,56,37,"map"],[70,42,56,40],[70,43,56,41],[70,53,56,41,"observer"],[70,61,56,49],[71,12,56,49],[71,19,56,53,"observer"],[71,27,56,61],[71,28,56,62,"getCurrentResult"],[71,44,56,78],[71,46,56,80],[72,10,56,80],[72,12,56,81],[73,10,57,6],[73,14,57,12,"hasIndexChange"],[73,28,57,26],[73,31,57,29,"newObservers"],[73,43,57,41],[73,44,57,42,"some"],[73,48,57,46],[73,49,57,47],[73,59,57,48,"observer"],[73,67,57,56],[73,69,57,58,"index"],[73,74,57,63],[74,12,57,63],[74,19,57,68,"observer"],[74,27,57,76],[74,32,57,81,"prevObservers"],[74,45,57,94],[74,46,57,95,"index"],[74,51,57,100],[74,52,57,101],[75,10,57,101],[75,12,57,102],[76,10,59,6],[76,14,59,10,"prevObservers"],[76,27,59,23],[76,28,59,24,"length"],[76,34,59,30],[76,39,59,35,"newObservers"],[76,51,59,47],[76,52,59,48,"length"],[76,58,59,54],[76,62,59,58],[76,63,59,59,"hasIndexChange"],[76,77,59,73],[76,79,59,75],[77,12,60,8],[78,10,61,6],[79,10,63,6],[79,16,63,10],[79,17,63,11,"observers"],[79,26,63,20],[79,29,63,23,"newObservers"],[79,41,63,35],[80,10,64,6],[80,16,64,10],[80,17,64,11,"observersMap"],[80,29,64,23],[80,32,64,26,"newObserversMap"],[80,47,64,41],[81,10,65,6],[81,16,65,10],[81,17,65,11,"result"],[81,23,65,17],[81,26,65,20,"newResult"],[81,35,65,29],[82,10,67,6],[82,14,67,10],[82,15,67,11],[82,21,67,15],[82,22,67,16,"hasListeners"],[82,34,67,28],[82,36,67,30],[82,38,67,32],[83,12,68,8],[84,10,69,6],[85,10,71,6],[85,55,71,12,"difference"],[85,65,71,22],[85,66,71,23,"prevObservers"],[85,79,71,36],[85,81,71,38,"newObservers"],[85,93,71,50],[85,94,71,51],[85,95,71,52,"forEach"],[85,102,71,59],[85,103,71,60],[85,113,71,60,"observer"],[85,121,71,68],[85,123,71,72],[86,12,72,8,"observer"],[86,20,72,16],[86,21,72,17,"destroy"],[86,28,72,24],[86,30,72,26],[87,10,73,6],[87,11,73,7],[87,12,73,8],[88,10,74,6],[88,55,74,12,"difference"],[88,65,74,22],[88,66,74,23,"newObservers"],[88,78,74,35],[88,80,74,37,"prevObservers"],[88,93,74,50],[88,94,74,51],[88,95,74,52,"forEach"],[88,102,74,59],[88,103,74,60],[88,113,74,60,"observer"],[88,121,74,68],[88,123,74,72],[89,12,75,8,"observer"],[89,20,75,16],[89,21,75,17,"subscribe"],[89,30,75,26],[89,31,75,27],[89,41,75,27,"result"],[89,47,75,33],[89,49,75,37],[90,14,76,10],[90,20,76,14],[90,21,76,15,"onUpdate"],[90,29,76,23],[90,30,76,24,"observer"],[90,38,76,32],[90,40,76,34,"result"],[90,46,76,40],[90,47,76,41],[91,12,77,8],[91,13,77,9],[91,14,77,10],[92,10,78,6],[92,11,78,7],[92,12,78,8],[93,10,79,6],[93,16,79,10],[93,17,79,11,"notify"],[93,23,79,17],[93,25,79,19],[94,8,80,4],[94,9,80,5],[94,10,80,6],[95,6,81,2],[96,4,81,3],[97,6,81,3],[98,6,81,3],[98,13,83,2],[98,41,83,21],[99,8,84,4],[99,15,84,11],[99,19,84,15],[99,20,84,16,"result"],[99,26,84,22],[100,6,85,2],[101,4,85,3],[102,6,85,3],[103,6,85,3],[103,13,87,2],[103,35,87,15],[104,8,88,4],[104,15,88,11],[104,19,88,15],[104,20,88,16,"observers"],[104,29,88,25],[104,30,88,26,"map"],[104,33,88,29],[104,34,88,30],[104,44,88,30,"observer"],[104,52,88,38],[105,10,88,38],[105,17,88,42,"observer"],[105,25,88,50],[105,26,88,51,"getCurrentQuery"],[105,41,88,66],[105,43,88,68],[106,8,88,68],[106,10,88,69],[107,6,89,2],[108,4,89,3],[109,6,89,3],[110,6,89,3],[110,13,91,2],[110,37,91,17],[111,8,92,4],[111,15,92,11],[111,19,92,15],[111,20,92,16,"observers"],[111,29,92,25],[112,6,93,2],[113,4,93,3],[114,6,93,3],[115,6,93,3],[115,13,95,2],[115,42,95,22,"queries"],[115,49,95,29],[115,51,95,31],[116,8,96,4],[116,15,96,11],[116,19,96,15],[116,20,96,16,"findMatchingObservers"],[116,41,96,37],[116,42,96,38,"queries"],[116,49,96,45],[116,50,96,46],[116,51,96,47,"map"],[116,54,96,50],[116,55,96,51],[116,65,96,51,"match"],[116,70,96,56],[117,10,96,56],[117,17,96,60,"match"],[117,22,96,65],[117,23,96,66,"observer"],[117,31,96,74],[117,32,96,75,"getOptimisticResult"],[117,51,96,94],[117,52,96,95,"match"],[117,57,96,100],[117,58,96,101,"defaultedQueryOptions"],[117,79,96,122],[117,80,96,123],[118,8,96,123],[118,10,96,124],[119,6,97,2],[120,4,97,3],[121,6,97,3],[122,6,97,3],[122,13,99,2],[122,44,99,24,"queries"],[122,51,99,31],[122,53,99,33],[123,8,99,33],[124,8,100,4],[124,12,100,10,"prevObservers"],[124,25,100,23],[124,28,100,26],[124,32,100,30],[124,33,100,31,"observers"],[124,42,100,40],[125,8,101,4],[125,12,101,10,"defaultedQueryOptions"],[125,33,101,31],[125,36,101,34,"queries"],[125,43,101,41],[125,44,101,42,"map"],[125,47,101,45],[125,48,101,46],[125,58,101,46,"options"],[125,65,101,53],[126,10,101,53],[126,17,101,57],[126,23,101,61],[126,24,101,62,"client"],[126,30,101,68],[126,31,101,69,"defaultQueryOptions"],[126,50,101,88],[126,51,101,89,"options"],[126,58,101,96],[126,59,101,97],[127,8,101,97],[127,10,101,98],[128,8,102,4],[128,12,102,10,"matchingObservers"],[128,29,102,27],[128,32,102,30,"defaultedQueryOptions"],[128,53,102,51],[128,54,102,52,"flatMap"],[128,61,102,59],[128,62,102,60],[128,72,102,60,"defaultedOptions"],[128,88,102,76],[128,90,102,80],[129,10,103,6],[129,14,103,12,"match"],[129,19,103,17],[129,22,103,20,"prevObservers"],[129,35,103,33],[129,36,103,34,"find"],[129,40,103,38],[129,41,103,39],[129,51,103,39,"observer"],[129,59,103,47],[130,12,103,47],[130,19,103,51,"observer"],[130,27,103,59],[130,28,103,60,"options"],[130,35,103,67],[130,36,103,68,"queryHash"],[130,45,103,77],[130,50,103,82,"defaultedOptions"],[130,66,103,98],[130,67,103,99,"queryHash"],[130,76,103,108],[131,10,103,108],[131,12,103,109],[132,10,105,6],[132,14,105,10,"match"],[132,19,105,15],[132,23,105,19],[132,27,105,23],[132,29,105,25],[133,12,106,8],[133,19,106,15],[133,20,106,16],[134,14,107,10,"defaultedQueryOptions"],[134,35,107,31],[134,37,107,33,"defaultedOptions"],[134,53,107,49],[135,14,108,10,"observer"],[135,22,108,18],[135,24,108,20,"match"],[136,12,109,8],[136,13,109,9],[136,14,109,10],[137,10,110,6],[138,10,112,6],[138,17,112,13],[138,19,112,15],[139,8,113,4],[139,9,113,5],[139,10,113,6],[140,8,114,4],[140,12,114,10,"matchedQueryHashes"],[140,30,114,28],[140,33,114,31,"matchingObservers"],[140,50,114,48],[140,51,114,49,"map"],[140,54,114,52],[140,55,114,53],[140,65,114,53,"match"],[140,70,114,58],[141,10,114,58],[141,17,114,62,"match"],[141,22,114,67],[141,23,114,68,"defaultedQueryOptions"],[141,44,114,89],[141,45,114,90,"queryHash"],[141,54,114,99],[142,8,114,99],[142,10,114,100],[143,8,115,4],[143,12,115,10,"unmatchedQueries"],[143,28,115,26],[143,31,115,29,"defaultedQueryOptions"],[143,52,115,50],[143,53,115,51,"filter"],[143,59,115,57],[143,60,115,58],[143,70,115,58,"defaultedOptions"],[143,86,115,74],[144,10,115,74],[144,17,115,78],[144,18,115,79,"matchedQueryHashes"],[144,36,115,97],[144,37,115,98,"includes"],[144,45,115,106],[144,46,115,107,"defaultedOptions"],[144,62,115,123],[144,63,115,124,"queryHash"],[144,72,115,133],[144,73,115,134],[145,8,115,134],[145,10,115,135],[146,8,116,4],[146,12,116,10,"unmatchedObservers"],[146,30,116,28],[146,33,116,31,"prevObservers"],[146,46,116,44],[146,47,116,45,"filter"],[146,53,116,51],[146,54,116,52],[146,64,116,52,"prevObserver"],[146,76,116,64],[147,10,116,64],[147,17,116,68],[147,18,116,69,"matchingObservers"],[147,35,116,86],[147,36,116,87,"some"],[147,40,116,91],[147,41,116,92],[147,51,116,92,"match"],[147,56,116,97],[148,12,116,97],[148,19,116,101,"match"],[148,24,116,106],[148,25,116,107,"observer"],[148,33,116,115],[148,38,116,120,"prevObserver"],[148,50,116,132],[149,10,116,132],[149,12,116,133],[150,8,116,133],[150,10,116,134],[151,8,118,4],[151,12,118,10,"getObserver"],[151,23,118,21],[151,26,118,24],[151,35,118,10,"getObserver"],[151,46,118,21],[151,47,118,24,"options"],[151,54,118,31],[151,56,118,35],[152,10,119,6],[152,14,119,12,"defaultedOptions"],[152,30,119,28],[152,33,119,31],[152,39,119,35],[152,40,119,36,"client"],[152,46,119,42],[152,47,119,43,"defaultQueryOptions"],[152,66,119,62],[152,67,119,63,"options"],[152,74,119,70],[152,75,119,71],[153,10,120,6],[153,14,120,12,"currentObserver"],[153,29,120,27],[153,32,120,30],[153,38,120,34],[153,39,120,35,"observersMap"],[153,51,120,47],[153,52,120,48,"defaultedOptions"],[153,68,120,64],[153,69,120,65,"queryHash"],[153,78,120,74],[153,79,120,75],[154,10,121,6],[154,17,121,13,"currentObserver"],[154,32,121,28],[154,36,121,32],[154,40,121,36],[154,43,121,39,"currentObserver"],[154,58,121,54],[154,61,121,57],[154,66,121,61],[154,119,121,75,"QueryObserver"],[154,132,121,88],[154,134,121,89],[154,140,121,93],[154,141,121,94,"client"],[154,147,121,100],[154,149,121,102,"defaultedOptions"],[154,165,121,118],[154,166,121,119],[155,8,122,4],[155,9,122,5],[156,8,124,4],[156,12,124,10,"newOrReusedObservers"],[156,32,124,30],[156,35,124,33,"unmatchedQueries"],[156,51,124,49],[156,52,124,50,"map"],[156,55,124,53],[156,56,124,54],[156,66,124,55,"options"],[156,73,124,62],[156,75,124,64,"index"],[156,80,124,69],[156,82,124,74],[157,10,125,6],[157,14,125,10,"options"],[157,21,125,17],[157,22,125,18,"keepPreviousData"],[157,38,125,34],[157,40,125,36],[158,12,127,8],[158,16,127,14,"previouslyUsedObserver"],[158,38,127,36],[158,41,127,39,"unmatchedObservers"],[158,59,127,57],[158,60,127,58,"index"],[158,65,127,63],[158,66,127,64],[159,12,129,8],[159,16,129,12,"previouslyUsedObserver"],[159,38,129,34],[159,43,129,39,"undefined"],[159,52,129,48],[159,54,129,50],[160,14,130,10],[160,21,130,17],[161,16,131,12,"defaultedQueryOptions"],[161,37,131,33],[161,39,131,35,"options"],[161,46,131,42],[162,16,132,12,"observer"],[162,24,132,20],[162,26,132,22,"previouslyUsedObserver"],[163,14,133,10],[163,15,133,11],[164,12,134,8],[165,10,135,6],[166,10,137,6],[166,17,137,13],[167,12,138,8,"defaultedQueryOptions"],[167,33,138,29],[167,35,138,31,"options"],[167,42,138,38],[168,12,139,8,"observer"],[168,20,139,16],[168,22,139,18,"getObserver"],[168,33,139,29],[168,34,139,30,"options"],[168,41,139,37],[169,10,140,6],[169,11,140,7],[170,8,141,4],[170,9,141,5],[170,10,141,6],[171,8,143,4],[171,12,143,10,"sortMatchesByOrderOfQueries"],[171,39,143,37],[171,42,143,40],[171,51,143,10,"sortMatchesByOrderOfQueries"],[171,78,143,37],[171,79,143,41,"a"],[171,80,143,42],[171,82,143,44,"b"],[171,83,143,45],[172,10,143,45],[172,17,143,50,"defaultedQueryOptions"],[172,38,143,71],[172,39,143,72,"indexOf"],[172,46,143,79],[172,47,143,80,"a"],[172,48,143,81],[172,49,143,82,"defaultedQueryOptions"],[172,70,143,103],[172,71,143,104],[172,74,143,107,"defaultedQueryOptions"],[172,95,143,128],[172,96,143,129,"indexOf"],[172,103,143,136],[172,104,143,137,"b"],[172,105,143,138],[172,106,143,139,"defaultedQueryOptions"],[172,127,143,160],[172,128,143,161],[173,8,143,161],[174,8,145,4],[174,15,145,11,"matchingObservers"],[174,32,145,28],[174,33,145,29,"concat"],[174,39,145,35],[174,40,145,36,"newOrReusedObservers"],[174,60,145,56],[174,61,145,57],[174,62,145,58,"sort"],[174,66,145,62],[174,67,145,63,"sortMatchesByOrderOfQueries"],[174,94,145,90],[174,95,145,91],[175,6,146,2],[176,4,146,3],[177,6,146,3],[178,6,146,3],[178,13,148,2],[178,31,148,11,"observer"],[178,39,148,19],[178,41,148,21,"result"],[178,47,148,27],[178,49,148,29],[179,8,149,4],[179,12,149,10,"index"],[179,17,149,15],[179,20,149,18],[179,24,149,22],[179,25,149,23,"observers"],[179,34,149,32],[179,35,149,33,"indexOf"],[179,42,149,40],[179,43,149,41,"observer"],[179,51,149,49],[179,52,149,50],[180,8,151,4],[180,12,151,8,"index"],[180,17,151,13],[180,22,151,18],[180,23,151,19],[180,24,151,20],[180,26,151,22],[181,10,152,6],[181,14,152,10],[181,15,152,11,"result"],[181,21,152,17],[181,24,152,20],[181,69,152,26,"replaceAt"],[181,78,152,35],[181,79,152,36],[181,83,152,40],[181,84,152,41,"result"],[181,90,152,47],[181,92,152,49,"index"],[181,97,152,54],[181,99,152,56,"result"],[181,105,152,62],[181,106,152,63],[182,10,153,6],[182,14,153,10],[182,15,153,11,"notify"],[182,21,153,17],[182,23,153,19],[183,8,154,4],[184,6,155,2],[185,4,155,3],[186,6,155,3],[187,6,155,3],[187,13,157,2],[187,31,157,11],[188,8,157,11],[189,8,158,4],[189,61,158,18,"notifyManager"],[189,74,158,31],[189,75,158,32,"batch"],[189,80,158,37],[189,81,158,38],[189,93,158,44],[190,10,159,6],[190,16,159,10],[190,17,159,11,"listeners"],[190,26,159,20],[190,27,159,21,"forEach"],[190,34,159,28],[190,35,159,29],[190,45,159,29,"listener"],[190,53,159,37],[190,55,159,41],[191,12,160,8,"listener"],[191,20,160,16],[191,21,160,17],[191,27,160,21],[191,28,160,22,"result"],[191,34,160,28],[191,35,160,29],[192,10,161,6],[192,11,161,7],[192,12,161,8],[193,8,162,4],[193,9,162,5],[193,10,162,6],[194,6,163,2],[195,4,163,3],[196,4,163,3],[197,2,163,3],[197,4,10,30],[197,56,10,43,"Subscribable"],[197,68,10,55],[198,2,167,0,"exports"],[198,9,167,7],[198,10,167,8,"QueriesObserver"],[198,25,167,23],[198,28,167,26,"QueriesObserver"],[198,43,167,41],[199,0,167,42]],"functionMap":{"names":["<global>","QueriesObserver","QueriesObserver#constructor","QueriesObserver#onSubscribe","observers.forEach$argument_0","observer.subscribe$argument_0","QueriesObserver#onUnsubscribe","QueriesObserver#destroy","QueriesObserver#setQueries","notifyManager.notifyManager.batch$argument_0","newObserverMatches.forEach$argument_0","newObserverMatches.map$argument_0","newObservers.map$argument_0","newObservers.some$argument_0","utils.difference.forEach$argument_0","QueriesObserver#getCurrentResult","QueriesObserver#getQueries","observers.map$argument_0","QueriesObserver#getObservers","QueriesObserver#getOptimisticResult","findMatchingObservers.map$argument_0","QueriesObserver#findMatchingObservers","queries.map$argument_0","defaultedQueryOptions.flatMap$argument_0","prevObservers.find$argument_0","matchingObservers.map$argument_0","defaultedQueryOptions.filter$argument_0","prevObservers.filter$argument_0","matchingObservers.some$argument_0","getObserver","unmatchedQueries.map$argument_0","sortMatchesByOrderOfQueries","QueriesObserver#onUpdate","QueriesObserver#notify","listeners.forEach$argument_0"],"mappings":"AAA;ACS;ECC;GDW;EEE;6BCE;2BCC;SDE;ODC;GFE;EKE;GLI;EME;2BHE;KGE;GNC;EOE;sCCE;iCCI,8ED;kDEC,uBF;kEGC,kDH;yCGC,uCH;+CIC,sDJ;4DKc;OLE;4DKC;2BTC;SSE;OLC;KDE;GPC;EcE;GdE;EeE;8BCC,sCD;GfC;EiBE;GjBE;EkBE;mDCC,wED;GlBC;EoBE;8CCE,mDD;4DEC;uCCC,qED;KFU;qDIC,8CJ;0DKC,4EL;oDMC,wCC,wCD,CN;wBQE;KRI;sDSE;KTiB;wCUE,yHV;GpBG;E+BE;G/BO;EgCE;sCxBC;6ByBC;OzBE;KwBC;GhCC;CDE"}},"type":"js/module"}]}